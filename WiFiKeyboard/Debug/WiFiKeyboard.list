
WiFiKeyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000355c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a24  08003a24  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a2c  08003a2c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  20000090  08003ac4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  08003ac4  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c24a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004398  00000000  00000000  0003c30a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000072bc  00000000  00000000  000406a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ba0  00000000  00000000  00047960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000db8  00000000  00000000  00048500  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a233  00000000  00000000  000492b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f1f5  00000000  00000000  000634eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0008aa21  00000000  00000000  000726e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000fd101  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e98  00000000  00000000  000fd17c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000090 	.word	0x20000090
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080036d8 	.word	0x080036d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000094 	.word	0x20000094
 80001d0:	080036d8 	.word	0x080036d8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <HAL_InitTick+0x3c>)
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_InitTick+0x40>)
{
 80004da:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004dc:	7818      	ldrb	r0, [r3, #0]
 80004de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80004e6:	6810      	ldr	r0, [r2, #0]
 80004e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004ec:	f000 f8aa 	bl	8000644 <HAL_SYSTICK_Config>
 80004f0:	4604      	mov	r4, r0
 80004f2:	b958      	cbnz	r0, 800050c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f4:	2d0f      	cmp	r5, #15
 80004f6:	d809      	bhi.n	800050c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f8:	4602      	mov	r2, r0
 80004fa:	4629      	mov	r1, r5
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000500:	f000 f85e 	bl	80005c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <HAL_InitTick+0x44>)
 8000506:	4620      	mov	r0, r4
 8000508:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800050a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800050c:	2001      	movs	r0, #1
 800050e:	e7fc      	b.n	800050a <HAL_InitTick+0x36>
 8000510:	20000028 	.word	0x20000028
 8000514:	20000000 	.word	0x20000000
 8000518:	20000004 	.word	0x20000004

0800051c <HAL_Init>:
{
 800051c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <HAL_Init+0x30>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000526:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800052e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000536:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f82f 	bl	800059c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	2000      	movs	r0, #0
 8000540:	f7ff ffc8 	bl	80004d4 <HAL_InitTick>
  HAL_MspInit();
 8000544:	f002 fd92 	bl	800306c <HAL_MspInit>
}
 8000548:	2000      	movs	r0, #0
 800054a:	bd08      	pop	{r3, pc}
 800054c:	40023c00 	.word	0x40023c00

08000550 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <HAL_IncTick+0x10>)
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <HAL_IncTick+0x14>)
 8000554:	6811      	ldr	r1, [r2, #0]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	440b      	add	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	200000c0 	.word	0x200000c0
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <HAL_GetTick+0x8>)
 800056a:	6818      	ldr	r0, [r3, #0]
}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	200000c0 	.word	0x200000c0

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b538      	push	{r3, r4, r5, lr}
 8000576:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000578:	f7ff fff6 	bl	8000568 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800057c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	bf1c      	itt	ne
 8000580:	4b05      	ldrne	r3, [pc, #20]	; (8000598 <HAL_Delay+0x24>)
 8000582:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000584:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000586:	bf18      	it	ne
 8000588:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058a:	f7ff ffed 	bl	8000568 <HAL_GetTick>
 800058e:	1b40      	subs	r0, r0, r5
 8000590:	42a0      	cmp	r0, r4
 8000592:	d3fa      	bcc.n	800058a <HAL_Delay+0x16>
  {
  }
}
 8000594:	bd38      	pop	{r3, r4, r5, pc}
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000

0800059c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800059e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a4:	041b      	lsls	r3, r3, #16
 80005a6:	0c1b      	lsrs	r3, r3, #16
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ac:	0200      	lsls	r0, r0, #8
 80005ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005b6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005b8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c2:	b570      	push	{r4, r5, r6, lr}
 80005c4:	68dc      	ldr	r4, [r3, #12]
 80005c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ca:	f1c4 0507 	rsb	r5, r4, #7
 80005ce:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d0:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	bf28      	it	cs
 80005d6:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005dc:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005de:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	bf8c      	ite	hi
 80005e4:	3c03      	subhi	r4, #3
 80005e6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e8:	ea21 0303 	bic.w	r3, r1, r3
 80005ec:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ee:	fa06 f404 	lsl.w	r4, r6, r4
 80005f2:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	bfa8      	it	ge
 80005fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000602:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	bfbc      	itt	lt
 8000608:	f000 000f 	andlt.w	r0, r0, #15
 800060c:	4a05      	ldrlt	r2, [pc, #20]	; (8000624 <HAL_NVIC_SetPriority+0x64>)
 800060e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	bfaa      	itet	ge
 8000612:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00
 8000624:	e000ed14 	.word	0xe000ed14

08000628 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000628:	2800      	cmp	r0, #0
 800062a:	db08      	blt.n	800063e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062c:	0942      	lsrs	r2, r0, #5
 800062e:	2301      	movs	r3, #1
 8000630:	f000 001f 	and.w	r0, r0, #31
 8000634:	fa03 f000 	lsl.w	r0, r3, r0
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <HAL_NVIC_EnableIRQ+0x18>)
 800063a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100

08000644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	3801      	subs	r0, #1
 8000646:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064a:	d20a      	bcs.n	8000662 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	21f0      	movs	r1, #240	; 0xf0
 8000654:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000662:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000674:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000676:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000678:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000808 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800067c:	4a60      	ldr	r2, [pc, #384]	; (8000800 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000680:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000684:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000686:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000688:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800068e:	42ac      	cmp	r4, r5
 8000690:	f040 80a6 	bne.w	80007e0 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000694:	684c      	ldr	r4, [r1, #4]
 8000696:	f024 0c10 	bic.w	ip, r4, #16
 800069a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800069e:	2603      	movs	r6, #3
 80006a0:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 80006a4:	fa06 f60e 	lsl.w	r6, r6, lr
 80006a8:	2f01      	cmp	r7, #1
 80006aa:	ea6f 0606 	mvn.w	r6, r6
 80006ae:	d811      	bhi.n	80006d4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 80006b0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006b2:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006b6:	68cf      	ldr	r7, [r1, #12]
 80006b8:	fa07 f70e 	lsl.w	r7, r7, lr
 80006bc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80006c0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006c2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006c4:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006c8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006cc:	409f      	lsls	r7, r3
 80006ce:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80006d2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006d4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006d6:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006da:	688f      	ldr	r7, [r1, #8]
 80006dc:	fa07 f70e 	lsl.w	r7, r7, lr
 80006e0:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006e4:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80006e8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ea:	d116      	bne.n	800071a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80006ec:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006f0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006f8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006fc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000700:	f04f 0c0f 	mov.w	ip, #15
 8000704:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000708:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800070c:	690f      	ldr	r7, [r1, #16]
 800070e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000712:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000716:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800071a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800071c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800071e:	f004 0703 	and.w	r7, r4, #3
 8000722:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000726:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800072a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800072c:	00e6      	lsls	r6, r4, #3
 800072e:	d557      	bpl.n	80007e0 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000730:	f04f 0b00 	mov.w	fp, #0
 8000734:	f8cd b00c 	str.w	fp, [sp, #12]
 8000738:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800073c:	4e31      	ldr	r6, [pc, #196]	; (8000804 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000742:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000746:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800074a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800074e:	9703      	str	r7, [sp, #12]
 8000750:	9f03      	ldr	r7, [sp, #12]
 8000752:	f023 0703 	bic.w	r7, r3, #3
 8000756:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800075a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800075e:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000762:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000766:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800076a:	f04f 0c0f 	mov.w	ip, #15
 800076e:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000772:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000774:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000778:	d039      	beq.n	80007ee <HAL_GPIO_Init+0x17e>
 800077a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800077e:	42b0      	cmp	r0, r6
 8000780:	d037      	beq.n	80007f2 <HAL_GPIO_Init+0x182>
 8000782:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000786:	42b0      	cmp	r0, r6
 8000788:	d035      	beq.n	80007f6 <HAL_GPIO_Init+0x186>
 800078a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800078e:	42b0      	cmp	r0, r6
 8000790:	d033      	beq.n	80007fa <HAL_GPIO_Init+0x18a>
 8000792:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000796:	42b0      	cmp	r0, r6
 8000798:	bf14      	ite	ne
 800079a:	2607      	movne	r6, #7
 800079c:	2604      	moveq	r6, #4
 800079e:	fa06 f60e 	lsl.w	r6, r6, lr
 80007a2:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007a6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007a8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007aa:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007ac:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007b0:	bf0c      	ite	eq
 80007b2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007b4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007b6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007b8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ba:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007be:	bf0c      	ite	eq
 80007c0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007c2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80007c4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007c6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007cc:	bf0c      	ite	eq
 80007ce:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007d0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80007d2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80007d4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007d6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007d8:	bf54      	ite	pl
 80007da:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80007dc:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80007de:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007e0:	3301      	adds	r3, #1
 80007e2:	2b10      	cmp	r3, #16
 80007e4:	f47f af4f 	bne.w	8000686 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007e8:	b005      	add	sp, #20
 80007ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007ee:	465e      	mov	r6, fp
 80007f0:	e7d5      	b.n	800079e <HAL_GPIO_Init+0x12e>
 80007f2:	2601      	movs	r6, #1
 80007f4:	e7d3      	b.n	800079e <HAL_GPIO_Init+0x12e>
 80007f6:	2602      	movs	r6, #2
 80007f8:	e7d1      	b.n	800079e <HAL_GPIO_Init+0x12e>
 80007fa:	2603      	movs	r6, #3
 80007fc:	e7cf      	b.n	800079e <HAL_GPIO_Init+0x12e>
 80007fe:	bf00      	nop
 8000800:	40013c00 	.word	0x40013c00
 8000804:	40020000 	.word	0x40020000
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800080c:	b10a      	cbz	r2, 8000812 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800080e:	6181      	str	r1, [r0, #24]
  }
}
 8000810:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000812:	0409      	lsls	r1, r1, #16
 8000814:	e7fb      	b.n	800080e <HAL_GPIO_WritePin+0x2>

08000816 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000816:	6943      	ldr	r3, [r0, #20]
 8000818:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800081c:	bf08      	it	eq
 800081e:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000820:	6181      	str	r1, [r0, #24]
  }
}
 8000822:	4770      	bx	lr

08000824 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000828:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800082a:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 800082e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8000832:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8000836:	f8bd e038 	ldrh.w	lr, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 800083a:	2801      	cmp	r0, #1
 800083c:	d027      	beq.n	800088e <HAL_HCD_HC_Init+0x6a>
  hhcd->hc[ch_num].do_ping = 0U;
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8000844:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8000846:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000848:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 800084c:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000850:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000854:	bf08      	it	eq
 8000856:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8000858:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 800085c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8000860:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000864:	f880 c03f 	strb.w	ip, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000868:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 800086c:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8000870:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8000874:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8000878:	e9cd ce01 	strd	ip, lr, [sp, #4]
 800087c:	9700      	str	r7, [sp, #0]
 800087e:	6820      	ldr	r0, [r4, #0]
 8000880:	f001 f942 	bl	8001b08 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000884:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8000888:	b004      	add	sp, #16
 800088a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 800088e:	2002      	movs	r0, #2
 8000890:	e7fa      	b.n	8000888 <HAL_HCD_HC_Init+0x64>

08000892 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8000892:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8000896:	2b01      	cmp	r3, #1
{
 8000898:	b510      	push	{r4, lr}
 800089a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800089c:	d009      	beq.n	80008b2 <HAL_HCD_HC_Halt+0x20>
 800089e:	2301      	movs	r3, #1
 80008a0:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80008a4:	6800      	ldr	r0, [r0, #0]
 80008a6:	f001 f9b7 	bl	8001c18 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 80008b0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80008b2:	2002      	movs	r0, #2
 80008b4:	e7fc      	b.n	80008b0 <HAL_HCD_HC_Halt+0x1e>

080008b6 <HAL_HCD_Init>:
{
 80008b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 80008ba:	4607      	mov	r7, r0
{
 80008bc:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 80008be:	2800      	cmp	r0, #0
 80008c0:	d041      	beq.n	8000946 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80008c2:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 80008c6:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80008c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008cc:	b91b      	cbnz	r3, 80008d6 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 80008ce:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80008d2:	f002 fcb1 	bl	8003238 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80008d6:	2303      	movs	r3, #3
 80008d8:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80008dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 80008de:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80008e0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 80008e4:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 80008e8:	bf08      	it	eq
 80008ea:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 80008ec:	f000 ffc8 	bl	8001880 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80008f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f2:	466d      	mov	r5, sp
 80008f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8000902:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000906:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000908:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800090c:	6838      	ldr	r0, [r7, #0]
 800090e:	f000 ff71 	bl	80017f4 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000912:	f856 0b10 	ldr.w	r0, [r6], #16
 8000916:	2101      	movs	r1, #1
 8000918:	f000 ffb8 	bl	800188c <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800091c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800091e:	466d      	mov	r5, sp
 8000920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000922:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800092a:	e885 0003 	stmia.w	r5, {r0, r1}
 800092e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000932:	6838      	ldr	r0, [r7, #0]
 8000934:	f001 f868 	bl	8001a08 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000938:	2301      	movs	r3, #1
 800093a:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 800093e:	2000      	movs	r0, #0
}
 8000940:	b00a      	add	sp, #40	; 0x28
 8000942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000946:	2001      	movs	r0, #1
 8000948:	e7fa      	b.n	8000940 <HAL_HCD_Init+0x8a>
	...

0800094c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800094c:	b4f0      	push	{r4, r5, r6, r7}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800094e:	2428      	movs	r4, #40	; 0x28
 8000950:	fb04 0401 	mla	r4, r4, r1, r0
{
 8000954:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8000958:	9e05      	ldr	r6, [sp, #20]
 800095a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 800095e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000962:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8000966:	b96f      	cbnz	r7, 8000984 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000968:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800096a:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800096c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8000970:	d02b      	beq.n	80009ca <HAL_HCD_HC_SubmitRequest+0x7e>
 8000972:	42bb      	cmp	r3, r7
 8000974:	d029      	beq.n	80009ca <HAL_HCD_HC_SubmitRequest+0x7e>
 8000976:	2b01      	cmp	r3, #1
 8000978:	d131      	bne.n	80009de <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800097a:	2328      	movs	r3, #40	; 0x28
 800097c:	fb03 0301 	mla	r3, r3, r1, r0
 8000980:	2200      	movs	r2, #0
 8000982:	e02a      	b.n	80009da <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000984:	f04f 0c02 	mov.w	ip, #2
 8000988:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  switch (ep_type)
 800098c:	2b03      	cmp	r3, #3
 800098e:	d826      	bhi.n	80009de <HAL_HCD_HC_SubmitRequest+0x92>
 8000990:	a401      	add	r4, pc, #4	; (adr r4, 8000998 <HAL_HCD_HC_SubmitRequest+0x4c>)
 8000992:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8000996:	bf00      	nop
 8000998:	080009a9 	.word	0x080009a9
 800099c:	0800097b 	.word	0x0800097b
 80009a0:	080009cb 	.word	0x080009cb
 80009a4:	080009cb 	.word	0x080009cb
      if ((token == 1U) && (direction == 0U)) /*send data */
 80009a8:	2f01      	cmp	r7, #1
 80009aa:	d118      	bne.n	80009de <HAL_HCD_HC_SubmitRequest+0x92>
 80009ac:	b9ba      	cbnz	r2, 80009de <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 80009ae:	b925      	cbnz	r5, 80009ba <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 80009b0:	2328      	movs	r3, #40	; 0x28
 80009b2:	fb03 0301 	mla	r3, r3, r1, r0
 80009b6:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80009ba:	2328      	movs	r3, #40	; 0x28
 80009bc:	fb03 0301 	mla	r3, r3, r1, r0
 80009c0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80009c4:	b14a      	cbz	r2, 80009da <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80009c6:	2202      	movs	r2, #2
 80009c8:	e007      	b.n	80009da <HAL_HCD_HC_SubmitRequest+0x8e>
 80009ca:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80009cc:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 80009d0:	b9ca      	cbnz	r2, 8000a06 <HAL_HCD_HC_SubmitRequest+0xba>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80009d2:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 80009d6:	2c00      	cmp	r4, #0
 80009d8:	d1f5      	bne.n	80009c6 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80009da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80009de:	2428      	movs	r4, #40	; 0x28
 80009e0:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80009e4:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 80009e6:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80009ea:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
 80009ec:	e9c3 6511 	strd	r6, r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80009f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80009f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80009f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80009fa:	3138      	adds	r1, #56	; 0x38
 80009fc:	7c02      	ldrb	r2, [r0, #16]
 80009fe:	6800      	ldr	r0, [r0, #0]
}
 8000a00:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000a02:	f001 b96d 	b.w	8001ce0 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000a06:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000a0a:	e7db      	b.n	80009c4 <HAL_HCD_HC_SubmitRequest+0x78>

08000a0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a10:	6806      	ldr	r6, [r0, #0]
{
 8000a12:	b085      	sub	sp, #20
 8000a14:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000a16:	4630      	mov	r0, r6
 8000a18:	f000 ff98 	bl	800194c <USB_GetMode>
 8000a1c:	2801      	cmp	r0, #1
 8000a1e:	f040 80ed 	bne.w	8000bfc <HAL_HCD_IRQHandler+0x1f0>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000a22:	6828      	ldr	r0, [r5, #0]
 8000a24:	f000 ff8e 	bl	8001944 <USB_ReadInterrupts>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	f000 80e7 	beq.w	8000bfc <HAL_HCD_IRQHandler+0x1f0>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000a2e:	6828      	ldr	r0, [r5, #0]
 8000a30:	f000 ff88 	bl	8001944 <USB_ReadInterrupts>
 8000a34:	0280      	lsls	r0, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000a36:	bf48      	it	mi
 8000a38:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000a3a:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000a3c:	bf44      	itt	mi
 8000a3e:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8000a42:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000a44:	f000 ff7e 	bl	8001944 <USB_ReadInterrupts>
 8000a48:	02c1      	lsls	r1, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000a4a:	bf48      	it	mi
 8000a4c:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000a4e:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000a50:	bf44      	itt	mi
 8000a52:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8000a56:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000a58:	f000 ff74 	bl	8001944 <USB_ReadInterrupts>
 8000a5c:	0142      	lsls	r2, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000a5e:	bf48      	it	mi
 8000a60:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000a62:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000a64:	bf44      	itt	mi
 8000a66:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8000a6a:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000a6c:	f000 ff6a 	bl	8001944 <USB_ReadInterrupts>
 8000a70:	0783      	lsls	r3, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000a72:	bf48      	it	mi
 8000a74:	682b      	ldrmi	r3, [r5, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000a76:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000a78:	bf44      	itt	mi
 8000a7a:	2202      	movmi	r2, #2
 8000a7c:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000a7e:	f000 ff61 	bl	8001944 <USB_ReadInterrupts>
 8000a82:	0087      	lsls	r7, r0, #2
 8000a84:	d510      	bpl.n	8000aa8 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000a86:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8000a8a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000a8e:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8000a92:	4628      	mov	r0, r5
 8000a94:	f002 fc22 	bl	80032dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	6828      	ldr	r0, [r5, #0]
 8000a9c:	f000 ff5a 	bl	8001954 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000aa0:	682b      	ldr	r3, [r5, #0]
 8000aa2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000aa8:	6828      	ldr	r0, [r5, #0]
 8000aaa:	f000 ff4b 	bl	8001944 <USB_ReadInterrupts>
 8000aae:	01c4      	lsls	r4, r0, #7
 8000ab0:	d543      	bpl.n	8000b3a <HAL_HCD_IRQHandler+0x12e>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000ab2:	682c      	ldr	r4, [r5, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000ab4:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8000ab8:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8000aba:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8000abe:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000ac0:	9b03      	ldr	r3, [sp, #12]
 8000ac2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000ac6:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000ac8:	9b02      	ldr	r3, [sp, #8]
 8000aca:	0798      	lsls	r0, r3, #30
 8000acc:	d50d      	bpl.n	8000aea <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000ace:	9b02      	ldr	r3, [sp, #8]
 8000ad0:	07d9      	lsls	r1, r3, #31
 8000ad2:	d506      	bpl.n	8000ae2 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000ad4:	69a3      	ldr	r3, [r4, #24]
 8000ad6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000ada:	61a3      	str	r3, [r4, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8000adc:	4628      	mov	r0, r5
 8000ade:	f002 fbf9 	bl	80032d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000ae2:	9b03      	ldr	r3, [sp, #12]
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000aea:	9b02      	ldr	r3, [sp, #8]
 8000aec:	071a      	lsls	r2, r3, #28
 8000aee:	d51a      	bpl.n	8000b26 <HAL_HCD_IRQHandler+0x11a>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000af0:	9b03      	ldr	r3, [sp, #12]
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000af8:	9b02      	ldr	r3, [sp, #8]
 8000afa:	075b      	lsls	r3, r3, #29
 8000afc:	f140 8089 	bpl.w	8000c12 <HAL_HCD_IRQHandler+0x206>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000b00:	69a9      	ldr	r1, [r5, #24]
 8000b02:	2902      	cmp	r1, #2
 8000b04:	d17d      	bne.n	8000c02 <HAL_HCD_IRQHandler+0x1f6>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000b06:	9b02      	ldr	r3, [sp, #8]
 8000b08:	6828      	ldr	r0, [r5, #0]
 8000b0a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000b0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b12:	bf18      	it	ne
 8000b14:	2101      	movne	r1, #1
 8000b16:	f000 ff1d 	bl	8001954 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8000b1a:	4628      	mov	r0, r5
 8000b1c:	f002 fbe3 	bl	80032e6 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8000b20:	4628      	mov	r0, r5
 8000b22:	f002 fbd7 	bl	80032d4 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000b26:	9b02      	ldr	r3, [sp, #8]
 8000b28:	069f      	lsls	r7, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000b2a:	bf42      	ittt	mi
 8000b2c:	9b03      	ldrmi	r3, [sp, #12]
 8000b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8000b32:	9303      	strmi	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000b34:	9b03      	ldr	r3, [sp, #12]
 8000b36:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000b3a:	6828      	ldr	r0, [r5, #0]
 8000b3c:	f000 ff02 	bl	8001944 <USB_ReadInterrupts>
 8000b40:	0700      	lsls	r0, r0, #28
 8000b42:	d505      	bpl.n	8000b50 <HAL_HCD_IRQHandler+0x144>
      HAL_HCD_SOF_Callback(hhcd);
 8000b44:	4628      	mov	r0, r5
 8000b46:	f002 fbc1 	bl	80032cc <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000b4a:	682b      	ldr	r3, [r5, #0]
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000b50:	6828      	ldr	r0, [r5, #0]
 8000b52:	f000 fef7 	bl	8001944 <USB_ReadInterrupts>
 8000b56:	0181      	lsls	r1, r0, #6
 8000b58:	d512      	bpl.n	8000b80 <HAL_HCD_IRQHandler+0x174>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000b5a:	6828      	ldr	r0, [r5, #0]
 8000b5c:	f001 f857 	bl	8001c0e <USB_HC_ReadInterrupt>
 8000b60:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8000b64:	9000      	str	r0, [sp, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000b66:	f04f 0900 	mov.w	r9, #0
 8000b6a:	9301      	str	r3, [sp, #4]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000b6c:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000b6e:	f04f 0802 	mov.w	r8, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000b72:	68ab      	ldr	r3, [r5, #8]
 8000b74:	6828      	ldr	r0, [r5, #0]
 8000b76:	454b      	cmp	r3, r9
 8000b78:	d85a      	bhi.n	8000c30 <HAL_HCD_IRQHandler+0x224>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b7e:	6143      	str	r3, [r0, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000b80:	6828      	ldr	r0, [r5, #0]
 8000b82:	f000 fedf 	bl	8001944 <USB_ReadInterrupts>
 8000b86:	06c3      	lsls	r3, r0, #27
 8000b88:	d538      	bpl.n	8000bfc <HAL_HCD_IRQHandler+0x1f0>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b8a:	682c      	ldr	r4, [r5, #0]
 8000b8c:	69a3      	ldr	r3, [r4, #24]
 8000b8e:	f023 0310 	bic.w	r3, r3, #16
 8000b92:	61a3      	str	r3, [r4, #24]
  temp = hhcd->Instance->GRXSTSP;
 8000b94:	6a26      	ldr	r6, [r4, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8000b96:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 8000b9a:	2a02      	cmp	r2, #2
 8000b9c:	d129      	bne.n	8000bf2 <HAL_HCD_IRQHandler+0x1e6>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000b9e:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8000ba2:	f1b8 0f00 	cmp.w	r8, #0
 8000ba6:	d024      	beq.n	8000bf2 <HAL_HCD_IRQHandler+0x1e6>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8000ba8:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8000bac:	2728      	movs	r7, #40	; 0x28
 8000bae:	fb07 5706 	mla	r7, r7, r6, r5
 8000bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000bb4:	b1e9      	cbz	r1, 8000bf2 <HAL_HCD_IRQHandler+0x1e6>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8000bb6:	4642      	mov	r2, r8
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f000 feb5 	bl	8001928 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8000bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000bc0:	4443      	add	r3, r8
 8000bc2:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8000bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bc6:	4443      	add	r3, r8
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8000bca:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
 8000bce:	0173      	lsls	r3, r6, #5
 8000bd0:	18e2      	adds	r2, r4, r3
 8000bd2:	6911      	ldr	r1, [r2, #16]
 8000bd4:	4ab6      	ldr	r2, [pc, #728]	; (8000eb0 <HAL_HCD_IRQHandler+0x4a4>)
 8000bd6:	400a      	ands	r2, r1
 8000bd8:	b15a      	cbz	r2, 8000bf2 <HAL_HCD_IRQHandler+0x1e6>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000bda:	58e2      	ldr	r2, [r4, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000bdc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000be0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000be4:	50e2      	str	r2, [r4, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8000be6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000bea:	f083 0301 	eor.w	r3, r3, #1
 8000bee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bf2:	682a      	ldr	r2, [r5, #0]
 8000bf4:	6993      	ldr	r3, [r2, #24]
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6193      	str	r3, [r2, #24]
}
 8000bfc:	b005      	add	sp, #20
 8000bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8000c02:	68eb      	ldr	r3, [r5, #12]
 8000c04:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8000c06:	bf04      	itt	eq
 8000c08:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8000c0c:	f8c4 2404 	streq.w	r2, [r4, #1028]	; 0x404
 8000c10:	e783      	b.n	8000b1a <HAL_HCD_IRQHandler+0x10e>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8000c12:	4628      	mov	r0, r5
 8000c14:	f002 fb6b 	bl	80032ee <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000c18:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000c1c:	682a      	ldr	r2, [r5, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000c1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000c22:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000c26:	6993      	ldr	r3, [r2, #24]
 8000c28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	e77a      	b.n	8000b26 <HAL_HCD_IRQHandler+0x11a>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000c30:	9a00      	ldr	r2, [sp, #0]
 8000c32:	f009 030f 	and.w	r3, r9, #15
 8000c36:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3a:	07da      	lsls	r2, r3, #31
 8000c3c:	f140 8085 	bpl.w	8000d4a <HAL_HCD_IRQHandler+0x33e>
 8000c40:	ea4f 1349 	mov.w	r3, r9, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000c44:	9a01      	ldr	r2, [sp, #4]
 8000c46:	fa5f f689 	uxtb.w	r6, r9
 8000c4a:	58d1      	ldr	r1, [r2, r3]
 8000c4c:	ea4f 1b46 	mov.w	fp, r6, lsl #5
 8000c50:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
 8000c54:	eb0b 040a 	add.w	r4, fp, sl
 8000c58:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000c5c:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000c5e:	f000 80ef 	beq.w	8000e40 <HAL_HCD_IRQHandler+0x434>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000c62:	074b      	lsls	r3, r1, #29
 8000c64:	d513      	bpl.n	8000c8e <HAL_HCD_IRQHandler+0x282>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000c66:	2104      	movs	r1, #4
 8000c68:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c6a:	68e1      	ldr	r1, [r4, #12]
 8000c6c:	f041 0102 	orr.w	r1, r1, #2
 8000c70:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000c72:	68a1      	ldr	r1, [r4, #8]
 8000c74:	0588      	lsls	r0, r1, #22
 8000c76:	d539      	bpl.n	8000cec <HAL_HCD_IRQHandler+0x2e0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c78:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c7a:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c82:	4631      	mov	r1, r6
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c84:	f000 ffc8 	bl	8001c18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8c:	e0b8      	b.n	8000e00 <HAL_HCD_IRQHandler+0x3f4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000c8e:	68a1      	ldr	r1, [r4, #8]
 8000c90:	0689      	lsls	r1, r1, #26
 8000c92:	d502      	bpl.n	8000c9a <HAL_HCD_IRQHandler+0x28e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000c94:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000c96:	60a1      	str	r1, [r4, #8]
 8000c98:	e7eb      	b.n	8000c72 <HAL_HCD_IRQHandler+0x266>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000c9a:	68a1      	ldr	r1, [r4, #8]
 8000c9c:	070a      	lsls	r2, r1, #28
 8000c9e:	d511      	bpl.n	8000cc4 <HAL_HCD_IRQHandler+0x2b8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ca0:	68e1      	ldr	r1, [r4, #12]
 8000ca2:	f041 0102 	orr.w	r1, r1, #2
 8000ca6:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8000ca8:	fb07 5106 	mla	r1, r7, r6, r5
 8000cac:	f04f 0c05 	mov.w	ip, #5
 8000cb0:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000cb8:	2108      	movs	r1, #8
 8000cba:	60a1      	str	r1, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	f000 ffab 	bl	8001c18 <USB_HC_Halt>
 8000cc2:	e7d6      	b.n	8000c72 <HAL_HCD_IRQHandler+0x266>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000cc4:	68a1      	ldr	r1, [r4, #8]
 8000cc6:	054b      	lsls	r3, r1, #21
 8000cc8:	d5d3      	bpl.n	8000c72 <HAL_HCD_IRQHandler+0x266>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000cca:	68e1      	ldr	r1, [r4, #12]
 8000ccc:	f041 0102 	orr.w	r1, r1, #2
 8000cd0:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000cd2:	4631      	mov	r1, r6
 8000cd4:	f000 ffa0 	bl	8001c18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000cd8:	2110      	movs	r1, #16
 8000cda:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000cdc:	fb07 5106 	mla	r1, r7, r6, r5
 8000ce0:	2008      	movs	r0, #8
 8000ce2:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000ce6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cea:	e7d4      	b.n	8000c96 <HAL_HCD_IRQHandler+0x28a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000cec:	68a1      	ldr	r1, [r4, #8]
 8000cee:	07c9      	lsls	r1, r1, #31
 8000cf0:	d53d      	bpl.n	8000d6e <HAL_HCD_IRQHandler+0x362>
    if (hhcd->Init.dma_enable != 0U)
 8000cf2:	6929      	ldr	r1, [r5, #16]
 8000cf4:	b149      	cbz	r1, 8000d0a <HAL_HCD_IRQHandler+0x2fe>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000cf6:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000cfa:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000cfc:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000d00:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8000d0a:	fb07 5c06 	mla	ip, r7, r6, r5
 8000d0e:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000d10:	2100      	movs	r1, #0
 8000d12:	f8cc 1058 	str.w	r1, [ip, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 8000d16:	f88c 205d 	strb.w	r2, [ip, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000d1a:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000d1c:	f89c 103f 	ldrb.w	r1, [ip, #63]	; 0x3f
 8000d20:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8000d24:	d114      	bne.n	8000d50 <HAL_HCD_IRQHandler+0x344>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000d26:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d28:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d30:	4631      	mov	r1, r6
 8000d32:	f000 ff71 	bl	8001c18 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000d36:	2310      	movs	r3, #16
 8000d38:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8000d3a:	fb07 5606 	mla	r6, r7, r6, r5
 8000d3e:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8000d42:	f083 0301 	eor.w	r3, r3, #1
 8000d46:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000d4a:	f109 0901 	add.w	r9, r9, #1
 8000d4e:	e710      	b.n	8000b72 <HAL_HCD_IRQHandler+0x166>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000d50:	2903      	cmp	r1, #3
 8000d52:	d1f2      	bne.n	8000d3a <HAL_HCD_IRQHandler+0x32e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000d54:	f85b 100a 	ldr.w	r1, [fp, sl]
 8000d58:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8000d5c:	f84b 100a 	str.w	r1, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d60:	4628      	mov	r0, r5
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000d62:	f88c 205c 	strb.w	r2, [ip, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d66:	4631      	mov	r1, r6
 8000d68:	f002 fabc 	bl	80032e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000d6c:	e7e5      	b.n	8000d3a <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000d6e:	68a1      	ldr	r1, [r4, #8]
 8000d70:	078a      	lsls	r2, r1, #30
 8000d72:	d530      	bpl.n	8000dd6 <HAL_HCD_IRQHandler+0x3ca>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000d74:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000d76:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000d7a:	f021 0102 	bic.w	r1, r1, #2
 8000d7e:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000d80:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8000d84:	2901      	cmp	r1, #1
 8000d86:	d102      	bne.n	8000d8e <HAL_HCD_IRQHandler+0x382>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8000d88:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 8000d8c:	e117      	b.n	8000fbe <HAL_HCD_IRQHandler+0x5b2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000d8e:	2905      	cmp	r1, #5
 8000d90:	d0fa      	beq.n	8000d88 <HAL_HCD_IRQHandler+0x37c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000d92:	2906      	cmp	r1, #6
 8000d94:	d001      	beq.n	8000d9a <HAL_HCD_IRQHandler+0x38e>
 8000d96:	2908      	cmp	r1, #8
 8000d98:	d10f      	bne.n	8000dba <HAL_HCD_IRQHandler+0x3ae>
      hhcd->hc[ch_num].ErrCnt++;
 8000d9a:	fb07 5106 	mla	r1, r7, r6, r5
 8000d9e:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8000da0:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8000da2:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8000da4:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000da6:	bf81      	itttt	hi
 8000da8:	2000      	movhi	r0, #0
 8000daa:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000dac:	2004      	movhi	r0, #4
 8000dae:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000db2:	bf98      	it	ls
 8000db4:	f881 805c 	strbls.w	r8, [r1, #92]	; 0x5c
 8000db8:	e004      	b.n	8000dc4 <HAL_HCD_IRQHandler+0x3b8>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000dba:	2903      	cmp	r1, #3
 8000dbc:	f040 80ff 	bne.w	8000fbe <HAL_HCD_IRQHandler+0x5b2>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000dc0:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000dc4:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000dc8:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000dcc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000dd0:	f84b 100a 	str.w	r1, [fp, sl]
 8000dd4:	e0f3      	b.n	8000fbe <HAL_HCD_IRQHandler+0x5b2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000dd6:	68a1      	ldr	r1, [r4, #8]
 8000dd8:	6828      	ldr	r0, [r5, #0]
 8000dda:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8000dde:	d011      	beq.n	8000e04 <HAL_HCD_IRQHandler+0x3f8>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000de0:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8000de2:	fb07 5206 	mla	r2, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8000dec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000dee:	3301      	adds	r3, #1
 8000df0:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000df2:	2306      	movs	r3, #6
 8000df4:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000df8:	4631      	mov	r1, r6
 8000dfa:	f000 ff0d 	bl	8001c18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	60a3      	str	r3, [r4, #8]
 8000e02:	e7a2      	b.n	8000d4a <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8000e04:	68a3      	ldr	r3, [r4, #8]
 8000e06:	06db      	lsls	r3, r3, #27
 8000e08:	d59f      	bpl.n	8000d4a <HAL_HCD_IRQHandler+0x33e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000e0a:	fb07 5206 	mla	r2, r7, r6, r5
 8000e0e:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d109      	bne.n	8000e2a <HAL_HCD_IRQHandler+0x41e>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000e16:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e18:	68e3      	ldr	r3, [r4, #12]
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e20:	4631      	mov	r1, r6
 8000e22:	f000 fef9 	bl	8001c18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000e26:	2310      	movs	r3, #16
 8000e28:	e7ea      	b.n	8000e00 <HAL_HCD_IRQHandler+0x3f4>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000e2a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8000e2e:	d1fa      	bne.n	8000e26 <HAL_HCD_IRQHandler+0x41a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000e30:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8000e32:	692b      	ldr	r3, [r5, #16]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f6      	bne.n	8000e26 <HAL_HCD_IRQHandler+0x41a>
        hhcd->hc[ch_num].state = HC_NAK;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8000e3e:	e7eb      	b.n	8000e18 <HAL_HCD_IRQHandler+0x40c>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000e40:	f011 0c04 	ands.w	ip, r1, #4
 8000e44:	d006      	beq.n	8000e54 <HAL_HCD_IRQHandler+0x448>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000e46:	2304      	movs	r3, #4
 8000e48:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e4a:	68e3      	ldr	r3, [r4, #12]
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	60e3      	str	r3, [r4, #12]
 8000e52:	e77a      	b.n	8000d4a <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000e54:	68a1      	ldr	r1, [r4, #8]
 8000e56:	f011 0120 	ands.w	r1, r1, #32
 8000e5a:	d014      	beq.n	8000e86 <HAL_HCD_IRQHandler+0x47a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8000e60:	fb07 5306 	mla	r3, r7, r6, r5
 8000e64:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000e68:	2a01      	cmp	r2, #1
 8000e6a:	f47f af6e 	bne.w	8000d4a <HAL_HCD_IRQHandler+0x33e>
      hhcd->hc[ch_num].do_ping = 0U;
 8000e6e:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000e72:	f883 805c 	strb.w	r8, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e76:	68e3      	ldr	r3, [r4, #12]
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e7e:	4631      	mov	r1, r6
 8000e80:	f000 feca 	bl	8001c18 <USB_HC_Halt>
 8000e84:	e761      	b.n	8000d4a <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8000e86:	68a3      	ldr	r3, [r4, #8]
 8000e88:	065a      	lsls	r2, r3, #25
 8000e8a:	d513      	bpl.n	8000eb4 <HAL_HCD_IRQHandler+0x4a8>
    hhcd->hc[ch_num].state = HC_NYET;
 8000e8c:	fb07 5306 	mla	r3, r7, r6, r5
 8000e90:	2204      	movs	r2, #4
 8000e92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8000e96:	2201      	movs	r2, #1
 8000e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000e9c:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e9e:	68e3      	ldr	r3, [r4, #12]
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ea6:	4631      	mov	r1, r6
 8000ea8:	f000 feb6 	bl	8001c18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8000eac:	2340      	movs	r3, #64	; 0x40
 8000eae:	e7a7      	b.n	8000e00 <HAL_HCD_IRQHandler+0x3f4>
 8000eb0:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000eb4:	68a1      	ldr	r1, [r4, #8]
 8000eb6:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 8000eba:	d005      	beq.n	8000ec8 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ebc:	68e3      	ldr	r3, [r4, #12]
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e6dd      	b.n	8000c84 <HAL_HCD_IRQHandler+0x278>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000ec8:	68a3      	ldr	r3, [r4, #8]
 8000eca:	07db      	lsls	r3, r3, #31
 8000ecc:	d50f      	bpl.n	8000eee <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ece:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000ed0:	fb07 5a06 	mla	sl, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ed4:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000ed8:	f8ca 1058 	str.w	r1, [sl, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000edc:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ede:	4631      	mov	r1, r6
 8000ee0:	f000 fe9a 	bl	8001c18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000ee8:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 8000eec:	e72d      	b.n	8000d4a <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000eee:	68a1      	ldr	r1, [r4, #8]
 8000ef0:	0709      	lsls	r1, r1, #28
 8000ef2:	d50e      	bpl.n	8000f12 <HAL_HCD_IRQHandler+0x506>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ef8:	68e3      	ldr	r3, [r4, #12]
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f00:	4631      	mov	r1, r6
 8000f02:	f000 fe89 	bl	8001c18 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8000f06:	fb07 5606 	mla	r6, r7, r6, r5
 8000f0a:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000f0c:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8000f10:	e71b      	b.n	8000d4a <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8000f12:	68a1      	ldr	r1, [r4, #8]
 8000f14:	06ca      	lsls	r2, r1, #27
 8000f16:	d514      	bpl.n	8000f42 <HAL_HCD_IRQHandler+0x536>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000f18:	fb07 5306 	mla	r3, r7, r6, r5
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 8000f20:	2203      	movs	r2, #3
 8000f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8000f26:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000f2a:	2a00      	cmp	r2, #0
 8000f2c:	f47f af74 	bne.w	8000e18 <HAL_HCD_IRQHandler+0x40c>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8000f30:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	f47f af6f 	bne.w	8000e18 <HAL_HCD_IRQHandler+0x40c>
        hhcd->hc[ch_num].do_ping = 1U;
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000f40:	e76a      	b.n	8000e18 <HAL_HCD_IRQHandler+0x40c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000f42:	68a1      	ldr	r1, [r4, #8]
 8000f44:	060b      	lsls	r3, r1, #24
 8000f46:	d50c      	bpl.n	8000f62 <HAL_HCD_IRQHandler+0x556>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f48:	68e3      	ldr	r3, [r4, #12]
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f50:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f52:	fb07 5606 	mla	r6, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f56:	f000 fe5f 	bl	8001c18 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8000f60:	e74d      	b.n	8000dfe <HAL_HCD_IRQHandler+0x3f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000f62:	68a1      	ldr	r1, [r4, #8]
 8000f64:	0549      	lsls	r1, r1, #21
 8000f66:	d50f      	bpl.n	8000f88 <HAL_HCD_IRQHandler+0x57c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f68:	68e3      	ldr	r3, [r4, #12]
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f70:	4631      	mov	r1, r6
 8000f72:	f000 fe51 	bl	8001c18 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f76:	2310      	movs	r3, #16
 8000f78:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7e:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000f80:	fb07 5606 	mla	r6, r7, r6, r5
 8000f84:	2308      	movs	r3, #8
 8000f86:	e7c1      	b.n	8000f0c <HAL_HCD_IRQHandler+0x500>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000f88:	68a1      	ldr	r1, [r4, #8]
 8000f8a:	078a      	lsls	r2, r1, #30
 8000f8c:	f57f aedd 	bpl.w	8000d4a <HAL_HCD_IRQHandler+0x33e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000f90:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000f92:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000f96:	f021 0102 	bic.w	r1, r1, #2
 8000f9a:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000f9c:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8000fa0:	2901      	cmp	r1, #1
 8000fa2:	d117      	bne.n	8000fd4 <HAL_HCD_IRQHandler+0x5c8>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8000fa4:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8000fa8:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8000fac:	3b02      	subs	r3, #2
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d805      	bhi.n	8000fbe <HAL_HCD_IRQHandler+0x5b2>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8000fb2:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000fb6:	f083 0301 	eor.w	r3, r3, #1
 8000fba:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000fbe:	fb07 5306 	mla	r3, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000fc2:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000fc6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000fca:	4631      	mov	r1, r6
 8000fcc:	4628      	mov	r0, r5
 8000fce:	f002 f989 	bl	80032e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000fd2:	e6ba      	b.n	8000d4a <HAL_HCD_IRQHandler+0x33e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000fd4:	2903      	cmp	r1, #3
 8000fd6:	d102      	bne.n	8000fde <HAL_HCD_IRQHandler+0x5d2>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000fd8:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 8000fdc:	e7ef      	b.n	8000fbe <HAL_HCD_IRQHandler+0x5b2>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8000fde:	2904      	cmp	r1, #4
 8000fe0:	d0fa      	beq.n	8000fd8 <HAL_HCD_IRQHandler+0x5cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000fe2:	2905      	cmp	r1, #5
 8000fe4:	f43f aed0 	beq.w	8000d88 <HAL_HCD_IRQHandler+0x37c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000fe8:	2906      	cmp	r1, #6
 8000fea:	f43f aed6 	beq.w	8000d9a <HAL_HCD_IRQHandler+0x38e>
 8000fee:	2908      	cmp	r1, #8
 8000ff0:	d1e5      	bne.n	8000fbe <HAL_HCD_IRQHandler+0x5b2>
 8000ff2:	e6d2      	b.n	8000d9a <HAL_HCD_IRQHandler+0x38e>

08000ff4 <HAL_HCD_Start>:
{
 8000ff4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8000ff6:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8000ffa:	2b01      	cmp	r3, #1
{
 8000ffc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000ffe:	d00d      	beq.n	800101c <HAL_HCD_Start+0x28>
 8001000:	2501      	movs	r5, #1
 8001002:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001006:	6800      	ldr	r0, [r0, #0]
 8001008:	f000 fc34 	bl	8001874 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800100c:	4629      	mov	r1, r5
 800100e:	6820      	ldr	r0, [r4, #0]
 8001010:	f000 fcda 	bl	80019c8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001014:	2000      	movs	r0, #0
 8001016:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 800101a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 800101c:	2002      	movs	r0, #2
 800101e:	e7fc      	b.n	800101a <HAL_HCD_Start+0x26>

08001020 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8001020:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001024:	2b01      	cmp	r3, #1
{
 8001026:	b510      	push	{r4, lr}
 8001028:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800102a:	d009      	beq.n	8001040 <HAL_HCD_Stop+0x20>
 800102c:	2301      	movs	r3, #1
 800102e:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001032:	6800      	ldr	r0, [r0, #0]
 8001034:	f000 ff00 	bl	8001e38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001038:	2000      	movs	r0, #0
 800103a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 800103e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001040:	2002      	movs	r0, #2
 8001042:	e7fc      	b.n	800103e <HAL_HCD_Stop+0x1e>

08001044 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001044:	6800      	ldr	r0, [r0, #0]
 8001046:	f000 bca1 	b.w	800198c <USB_ResetPort>

0800104a <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800104a:	2328      	movs	r3, #40	; 0x28
 800104c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001050:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8001054:	4770      	bx	lr

08001056 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001056:	6800      	ldr	r0, [r0, #0]
 8001058:	f000 bd51 	b.w	8001afe <USB_GetCurrentFrame>

0800105c <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800105c:	6800      	ldr	r0, [r0, #0]
 800105e:	f000 bd43 	b.w	8001ae8 <USB_GetHostSpeed>
	...

08001064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001064:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001068:	4604      	mov	r4, r0
 800106a:	b908      	cbnz	r0, 8001070 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800106c:	2001      	movs	r0, #1
 800106e:	e03f      	b.n	80010f0 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001070:	6803      	ldr	r3, [r0, #0]
 8001072:	07dd      	lsls	r5, r3, #31
 8001074:	d410      	bmi.n	8001098 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	0798      	lsls	r0, r3, #30
 800107a:	d45a      	bmi.n	8001132 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	071a      	lsls	r2, r3, #28
 8001080:	f100 809c 	bmi.w	80011bc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	075b      	lsls	r3, r3, #29
 8001088:	f100 80ba 	bmi.w	8001200 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800108c:	69a0      	ldr	r0, [r4, #24]
 800108e:	2800      	cmp	r0, #0
 8001090:	f040 811b 	bne.w	80012ca <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001094:	2000      	movs	r0, #0
 8001096:	e02b      	b.n	80010f0 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001098:	4ba7      	ldr	r3, [pc, #668]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	f002 020c 	and.w	r2, r2, #12
 80010a0:	2a04      	cmp	r2, #4
 80010a2:	d007      	beq.n	80010b4 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010aa:	2a08      	cmp	r2, #8
 80010ac:	d10a      	bne.n	80010c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	0259      	lsls	r1, r3, #9
 80010b2:	d507      	bpl.n	80010c4 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	4ba0      	ldr	r3, [pc, #640]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	039a      	lsls	r2, r3, #14
 80010ba:	d5dc      	bpl.n	8001076 <HAL_RCC_OscConfig+0x12>
 80010bc:	6863      	ldr	r3, [r4, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1d9      	bne.n	8001076 <HAL_RCC_OscConfig+0x12>
 80010c2:	e7d3      	b.n	800106c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c4:	6863      	ldr	r3, [r4, #4]
 80010c6:	4d9c      	ldr	r5, [pc, #624]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010cc:	d113      	bne.n	80010f6 <HAL_RCC_OscConfig+0x92>
 80010ce:	682b      	ldr	r3, [r5, #0]
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010d6:	f7ff fa47 	bl	8000568 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4d97      	ldr	r5, [pc, #604]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80010dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	682b      	ldr	r3, [r5, #0]
 80010e0:	039b      	lsls	r3, r3, #14
 80010e2:	d4c8      	bmi.n	8001076 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fa40 	bl	8000568 <HAL_GetTick>
 80010e8:	1b80      	subs	r0, r0, r6
 80010ea:	2864      	cmp	r0, #100	; 0x64
 80010ec:	d9f7      	bls.n	80010de <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80010ee:	2003      	movs	r0, #3
}
 80010f0:	b002      	add	sp, #8
 80010f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010fa:	d104      	bne.n	8001106 <HAL_RCC_OscConfig+0xa2>
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001102:	602b      	str	r3, [r5, #0]
 8001104:	e7e3      	b.n	80010ce <HAL_RCC_OscConfig+0x6a>
 8001106:	682a      	ldr	r2, [r5, #0]
 8001108:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800110c:	602a      	str	r2, [r5, #0]
 800110e:	682a      	ldr	r2, [r5, #0]
 8001110:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001114:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1dd      	bne.n	80010d6 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800111a:	f7ff fa25 	bl	8000568 <HAL_GetTick>
 800111e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001120:	682b      	ldr	r3, [r5, #0]
 8001122:	039f      	lsls	r7, r3, #14
 8001124:	d5a7      	bpl.n	8001076 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001126:	f7ff fa1f 	bl	8000568 <HAL_GetTick>
 800112a:	1b80      	subs	r0, r0, r6
 800112c:	2864      	cmp	r0, #100	; 0x64
 800112e:	d9f7      	bls.n	8001120 <HAL_RCC_OscConfig+0xbc>
 8001130:	e7dd      	b.n	80010ee <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001132:	4b81      	ldr	r3, [pc, #516]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	f012 0f0c 	tst.w	r2, #12
 800113a:	d007      	beq.n	800114c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001142:	2a08      	cmp	r2, #8
 8001144:	d111      	bne.n	800116a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	025e      	lsls	r6, r3, #9
 800114a:	d40e      	bmi.n	800116a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114c:	4b7a      	ldr	r3, [pc, #488]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	0795      	lsls	r5, r2, #30
 8001152:	d502      	bpl.n	800115a <HAL_RCC_OscConfig+0xf6>
 8001154:	68e2      	ldr	r2, [r4, #12]
 8001156:	2a01      	cmp	r2, #1
 8001158:	d188      	bne.n	800106c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	6921      	ldr	r1, [r4, #16]
 800115e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001162:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001166:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001168:	e788      	b.n	800107c <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800116a:	68e2      	ldr	r2, [r4, #12]
 800116c:	4b73      	ldr	r3, [pc, #460]	; (800133c <HAL_RCC_OscConfig+0x2d8>)
 800116e:	b1b2      	cbz	r2, 800119e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001174:	f7ff f9f8 	bl	8000568 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001178:	4d6f      	ldr	r5, [pc, #444]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800117a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	0798      	lsls	r0, r3, #30
 8001180:	d507      	bpl.n	8001192 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	6922      	ldr	r2, [r4, #16]
 8001186:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800118a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800118e:	602b      	str	r3, [r5, #0]
 8001190:	e774      	b.n	800107c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff f9e9 	bl	8000568 <HAL_GetTick>
 8001196:	1b80      	subs	r0, r0, r6
 8001198:	2802      	cmp	r0, #2
 800119a:	d9ef      	bls.n	800117c <HAL_RCC_OscConfig+0x118>
 800119c:	e7a7      	b.n	80010ee <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800119e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011a0:	f7ff f9e2 	bl	8000568 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a4:	4d64      	ldr	r5, [pc, #400]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	0799      	lsls	r1, r3, #30
 80011ac:	f57f af66 	bpl.w	800107c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff f9da 	bl	8000568 <HAL_GetTick>
 80011b4:	1b80      	subs	r0, r0, r6
 80011b6:	2802      	cmp	r0, #2
 80011b8:	d9f6      	bls.n	80011a8 <HAL_RCC_OscConfig+0x144>
 80011ba:	e798      	b.n	80010ee <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011bc:	6962      	ldr	r2, [r4, #20]
 80011be:	4b60      	ldr	r3, [pc, #384]	; (8001340 <HAL_RCC_OscConfig+0x2dc>)
 80011c0:	b17a      	cbz	r2, 80011e2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011c6:	f7ff f9cf 	bl	8000568 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ca:	4d5b      	ldr	r5, [pc, #364]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80011cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011d0:	079f      	lsls	r7, r3, #30
 80011d2:	f53f af57 	bmi.w	8001084 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff f9c7 	bl	8000568 <HAL_GetTick>
 80011da:	1b80      	subs	r0, r0, r6
 80011dc:	2802      	cmp	r0, #2
 80011de:	d9f6      	bls.n	80011ce <HAL_RCC_OscConfig+0x16a>
 80011e0:	e785      	b.n	80010ee <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80011e2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011e4:	f7ff f9c0 	bl	8000568 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e8:	4d53      	ldr	r5, [pc, #332]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80011ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011ee:	0798      	lsls	r0, r3, #30
 80011f0:	f57f af48 	bpl.w	8001084 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f4:	f7ff f9b8 	bl	8000568 <HAL_GetTick>
 80011f8:	1b80      	subs	r0, r0, r6
 80011fa:	2802      	cmp	r0, #2
 80011fc:	d9f6      	bls.n	80011ec <HAL_RCC_OscConfig+0x188>
 80011fe:	e776      	b.n	80010ee <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001200:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
 8001202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001204:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001208:	d128      	bne.n	800125c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	9201      	str	r2, [sp, #4]
 800120c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001212:	641a      	str	r2, [r3, #64]	; 0x40
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800121e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	4d48      	ldr	r5, [pc, #288]	; (8001344 <HAL_RCC_OscConfig+0x2e0>)
 8001222:	682b      	ldr	r3, [r5, #0]
 8001224:	05d9      	lsls	r1, r3, #23
 8001226:	d51b      	bpl.n	8001260 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001228:	68a3      	ldr	r3, [r4, #8]
 800122a:	4d43      	ldr	r5, [pc, #268]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
 800122c:	2b01      	cmp	r3, #1
 800122e:	d127      	bne.n	8001280 <HAL_RCC_OscConfig+0x21c>
 8001230:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001238:	f7ff f996 	bl	8000568 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123c:	4d3e      	ldr	r5, [pc, #248]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800123e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001240:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001246:	079b      	lsls	r3, r3, #30
 8001248:	d539      	bpl.n	80012be <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800124a:	2e00      	cmp	r6, #0
 800124c:	f43f af1e 	beq.w	800108c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001250:	4a39      	ldr	r2, [pc, #228]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
 8001252:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	e717      	b.n	800108c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800125c:	2600      	movs	r6, #0
 800125e:	e7df      	b.n	8001220 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001266:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001268:	f7ff f97e 	bl	8000568 <HAL_GetTick>
 800126c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126e:	682b      	ldr	r3, [r5, #0]
 8001270:	05da      	lsls	r2, r3, #23
 8001272:	d4d9      	bmi.n	8001228 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001274:	f7ff f978 	bl	8000568 <HAL_GetTick>
 8001278:	1bc0      	subs	r0, r0, r7
 800127a:	2802      	cmp	r0, #2
 800127c:	d9f7      	bls.n	800126e <HAL_RCC_OscConfig+0x20a>
 800127e:	e736      	b.n	80010ee <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001280:	2b05      	cmp	r3, #5
 8001282:	d104      	bne.n	800128e <HAL_RCC_OscConfig+0x22a>
 8001284:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	672b      	str	r3, [r5, #112]	; 0x70
 800128c:	e7d0      	b.n	8001230 <HAL_RCC_OscConfig+0x1cc>
 800128e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001290:	f022 0201 	bic.w	r2, r2, #1
 8001294:	672a      	str	r2, [r5, #112]	; 0x70
 8001296:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001298:	f022 0204 	bic.w	r2, r2, #4
 800129c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ca      	bne.n	8001238 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80012a2:	f7ff f961 	bl	8000568 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012aa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ae:	0798      	lsls	r0, r3, #30
 80012b0:	d5cb      	bpl.n	800124a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7ff f959 	bl	8000568 <HAL_GetTick>
 80012b6:	1bc0      	subs	r0, r0, r7
 80012b8:	4540      	cmp	r0, r8
 80012ba:	d9f7      	bls.n	80012ac <HAL_RCC_OscConfig+0x248>
 80012bc:	e717      	b.n	80010ee <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff f953 	bl	8000568 <HAL_GetTick>
 80012c2:	1bc0      	subs	r0, r0, r7
 80012c4:	4540      	cmp	r0, r8
 80012c6:	d9bd      	bls.n	8001244 <HAL_RCC_OscConfig+0x1e0>
 80012c8:	e711      	b.n	80010ee <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ca:	4d1b      	ldr	r5, [pc, #108]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
 80012cc:	68ab      	ldr	r3, [r5, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d047      	beq.n	8001366 <HAL_RCC_OscConfig+0x302>
 80012d6:	4e1c      	ldr	r6, [pc, #112]	; (8001348 <HAL_RCC_OscConfig+0x2e4>)
 80012d8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012da:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80012dc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012de:	d135      	bne.n	800134c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80012e0:	f7ff f942 	bl	8000568 <HAL_GetTick>
 80012e4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	0199      	lsls	r1, r3, #6
 80012ea:	d41e      	bmi.n	800132a <HAL_RCC_OscConfig+0x2c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012ec:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012f4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001300:	4c0d      	ldr	r4, [pc, #52]	; (8001338 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001302:	0852      	lsrs	r2, r2, #1
 8001304:	3a01      	subs	r2, #1
 8001306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800130a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800130c:	2301      	movs	r3, #1
 800130e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001310:	f7ff f92a 	bl	8000568 <HAL_GetTick>
 8001314:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	019a      	lsls	r2, r3, #6
 800131a:	f53f aebb 	bmi.w	8001094 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff f923 	bl	8000568 <HAL_GetTick>
 8001322:	1b40      	subs	r0, r0, r5
 8001324:	2802      	cmp	r0, #2
 8001326:	d9f6      	bls.n	8001316 <HAL_RCC_OscConfig+0x2b2>
 8001328:	e6e1      	b.n	80010ee <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800132a:	f7ff f91d 	bl	8000568 <HAL_GetTick>
 800132e:	1bc0      	subs	r0, r0, r7
 8001330:	2802      	cmp	r0, #2
 8001332:	d9d8      	bls.n	80012e6 <HAL_RCC_OscConfig+0x282>
 8001334:	e6db      	b.n	80010ee <HAL_RCC_OscConfig+0x8a>
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	42470000 	.word	0x42470000
 8001340:	42470e80 	.word	0x42470e80
 8001344:	40007000 	.word	0x40007000
 8001348:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800134c:	f7ff f90c 	bl	8000568 <HAL_GetTick>
 8001350:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001352:	682b      	ldr	r3, [r5, #0]
 8001354:	019b      	lsls	r3, r3, #6
 8001356:	f57f ae9d 	bpl.w	8001094 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800135a:	f7ff f905 	bl	8000568 <HAL_GetTick>
 800135e:	1b00      	subs	r0, r0, r4
 8001360:	2802      	cmp	r0, #2
 8001362:	d9f6      	bls.n	8001352 <HAL_RCC_OscConfig+0x2ee>
 8001364:	e6c3      	b.n	80010ee <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001366:	2801      	cmp	r0, #1
 8001368:	f43f aec2 	beq.w	80010f0 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 800136c:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	69e3      	ldr	r3, [r4, #28]
 8001370:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001374:	429a      	cmp	r2, r3
 8001376:	f47f ae79 	bne.w	800106c <HAL_RCC_OscConfig+0x8>
 800137a:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800137c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001380:	4293      	cmp	r3, r2
 8001382:	f47f ae73 	bne.w	800106c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001386:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001388:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800138c:	4003      	ands	r3, r0
 800138e:	4293      	cmp	r3, r2
 8001390:	f47f ae6c 	bne.w	800106c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001394:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001396:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800139a:	4293      	cmp	r3, r2
 800139c:	f47f ae66 	bne.w	800106c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013a2:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80013a6:	1ac0      	subs	r0, r0, r3
 80013a8:	bf18      	it	ne
 80013aa:	2001      	movne	r0, #1
 80013ac:	e6a0      	b.n	80010f0 <HAL_RCC_OscConfig+0x8c>
 80013ae:	bf00      	nop

080013b0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013b0:	4913      	ldr	r1, [pc, #76]	; (8001400 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80013b2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013b4:	688b      	ldr	r3, [r1, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d003      	beq.n	80013c6 <HAL_RCC_GetSysClockFreq+0x16>
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d003      	beq.n	80013ca <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013c2:	4810      	ldr	r0, [pc, #64]	; (8001404 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80013c4:	e000      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 80013c6:	4810      	ldr	r0, [pc, #64]	; (8001408 <HAL_RCC_GetSysClockFreq+0x58>)
}
 80013c8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ca:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013cc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ce:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013d0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d4:	bf14      	ite	ne
 80013d6:	480c      	ldrne	r0, [pc, #48]	; (8001408 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d8:	480a      	ldreq	r0, [pc, #40]	; (8001404 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013da:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013de:	bf18      	it	ne
 80013e0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e6:	fba1 0100 	umull	r0, r1, r1, r0
 80013ea:	f7fe fef3 	bl	80001d4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <HAL_RCC_GetSysClockFreq+0x50>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013f6:	3301      	adds	r3, #1
 80013f8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80013fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80013fe:	e7e3      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x18>
 8001400:	40023800 	.word	0x40023800
 8001404:	00f42400 	.word	0x00f42400
 8001408:	017d7840 	.word	0x017d7840

0800140c <HAL_RCC_ClockConfig>:
{
 800140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001410:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001412:	4604      	mov	r4, r0
 8001414:	b910      	cbnz	r0, 800141c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001416:	2001      	movs	r0, #1
}
 8001418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <HAL_RCC_ClockConfig+0x120>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	f002 020f 	and.w	r2, r2, #15
 8001424:	428a      	cmp	r2, r1
 8001426:	d328      	bcc.n	800147a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001428:	6821      	ldr	r1, [r4, #0]
 800142a:	078f      	lsls	r7, r1, #30
 800142c:	d42d      	bmi.n	800148a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142e:	07c8      	lsls	r0, r1, #31
 8001430:	d440      	bmi.n	80014b4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001432:	4b3e      	ldr	r3, [pc, #248]	; (800152c <HAL_RCC_ClockConfig+0x120>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	f002 020f 	and.w	r2, r2, #15
 800143a:	42aa      	cmp	r2, r5
 800143c:	d865      	bhi.n	800150a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143e:	6822      	ldr	r2, [r4, #0]
 8001440:	0751      	lsls	r1, r2, #29
 8001442:	d46b      	bmi.n	800151c <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001444:	0713      	lsls	r3, r2, #28
 8001446:	d507      	bpl.n	8001458 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001448:	4a39      	ldr	r2, [pc, #228]	; (8001530 <HAL_RCC_ClockConfig+0x124>)
 800144a:	6921      	ldr	r1, [r4, #16]
 800144c:	6893      	ldr	r3, [r2, #8]
 800144e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001452:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001456:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001458:	f7ff ffaa 	bl	80013b0 <HAL_RCC_GetSysClockFreq>
 800145c:	4b34      	ldr	r3, [pc, #208]	; (8001530 <HAL_RCC_ClockConfig+0x124>)
 800145e:	4a35      	ldr	r2, [pc, #212]	; (8001534 <HAL_RCC_ClockConfig+0x128>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	40d8      	lsrs	r0, r3
 800146a:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_RCC_ClockConfig+0x12c>)
 800146c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <HAL_RCC_ClockConfig+0x130>)
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	f7ff f82f 	bl	80004d4 <HAL_InitTick>
  return HAL_OK;
 8001476:	2000      	movs	r0, #0
 8001478:	e7ce      	b.n	8001418 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	428b      	cmp	r3, r1
 8001486:	d1c6      	bne.n	8001416 <HAL_RCC_ClockConfig+0xa>
 8001488:	e7ce      	b.n	8001428 <HAL_RCC_ClockConfig+0x1c>
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800148c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001490:	bf1e      	ittt	ne
 8001492:	689a      	ldrne	r2, [r3, #8]
 8001494:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001498:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800149c:	bf42      	ittt	mi
 800149e:	689a      	ldrmi	r2, [r3, #8]
 80014a0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80014a4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	68a0      	ldr	r0, [r4, #8]
 80014aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80014ae:	4302      	orrs	r2, r0
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	e7bc      	b.n	800142e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b4:	6862      	ldr	r2, [r4, #4]
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_RCC_ClockConfig+0x124>)
 80014b8:	2a01      	cmp	r2, #1
 80014ba:	d11c      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c2:	d0a8      	beq.n	8001416 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c4:	4e1a      	ldr	r6, [pc, #104]	; (8001530 <HAL_RCC_ClockConfig+0x124>)
 80014c6:	68b3      	ldr	r3, [r6, #8]
 80014c8:	f023 0303 	bic.w	r3, r3, #3
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80014d0:	f7ff f84a 	bl	8000568 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014d8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	68b3      	ldr	r3, [r6, #8]
 80014dc:	6862      	ldr	r2, [r4, #4]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014e6:	d0a4      	beq.n	8001432 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e8:	f7ff f83e 	bl	8000568 <HAL_GetTick>
 80014ec:	1bc0      	subs	r0, r0, r7
 80014ee:	4540      	cmp	r0, r8
 80014f0:	d9f3      	bls.n	80014da <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80014f2:	2003      	movs	r0, #3
 80014f4:	e790      	b.n	8001418 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014f6:	1e91      	subs	r1, r2, #2
 80014f8:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fa:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fc:	d802      	bhi.n	8001504 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001502:	e7de      	b.n	80014c2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	f013 0f02 	tst.w	r3, #2
 8001508:	e7db      	b.n	80014c2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	b2ea      	uxtb	r2, r5
 800150c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 030f 	and.w	r3, r3, #15
 8001514:	42ab      	cmp	r3, r5
 8001516:	f47f af7e 	bne.w	8001416 <HAL_RCC_ClockConfig+0xa>
 800151a:	e790      	b.n	800143e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800151c:	4904      	ldr	r1, [pc, #16]	; (8001530 <HAL_RCC_ClockConfig+0x124>)
 800151e:	68e0      	ldr	r0, [r4, #12]
 8001520:	688b      	ldr	r3, [r1, #8]
 8001522:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001526:	4303      	orrs	r3, r0
 8001528:	608b      	str	r3, [r1, #8]
 800152a:	e78b      	b.n	8001444 <HAL_RCC_ClockConfig+0x38>
 800152c:	40023c00 	.word	0x40023c00
 8001530:	40023800 	.word	0x40023800
 8001534:	08003a05 	.word	0x08003a05
 8001538:	20000028 	.word	0x20000028
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	4a03      	ldr	r2, [pc, #12]	; (800155c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800154e:	6810      	ldr	r0, [r2, #0]
}
 8001550:	40d8      	lsrs	r0, r3
 8001552:	4770      	bx	lr
 8001554:	40023800 	.word	0x40023800
 8001558:	08003a15 	.word	0x08003a15
 800155c:	20000028 	.word	0x20000028

08001560 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800156a:	5cd3      	ldrb	r3, [r2, r3]
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800156e:	6810      	ldr	r0, [r2, #0]
}
 8001570:	40d8      	lsrs	r0, r3
 8001572:	4770      	bx	lr
 8001574:	40023800 	.word	0x40023800
 8001578:	08003a15 	.word	0x08003a15
 800157c:	20000028 	.word	0x20000028

08001580 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001580:	6803      	ldr	r3, [r0, #0]
 8001582:	68c1      	ldr	r1, [r0, #12]
 8001584:	691a      	ldr	r2, [r3, #16]
{
 8001586:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001588:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
{
 800158c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800158e:	430a      	orrs	r2, r1
 8001590:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001592:	6925      	ldr	r5, [r4, #16]
 8001594:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001596:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001598:	69c0      	ldr	r0, [r0, #28]
 800159a:	432a      	orrs	r2, r5
 800159c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800159e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015a2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80015a4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015a8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80015aa:	430a      	orrs	r2, r1
 80015ac:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	69a1      	ldr	r1, [r4, #24]
 80015b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80015b6:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015bc:	615a      	str	r2, [r3, #20]
 80015be:	4a26      	ldr	r2, [pc, #152]	; (8001658 <UART_SetConfig+0xd8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015c0:	d129      	bne.n	8001616 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d003      	beq.n	80015ce <UART_SetConfig+0x4e>
 80015c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d120      	bne.n	8001610 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80015ce:	f7ff ffc7 	bl	8001560 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80015d2:	6862      	ldr	r2, [r4, #4]
 80015d4:	2600      	movs	r6, #0
 80015d6:	1892      	adds	r2, r2, r2
 80015d8:	f04f 0119 	mov.w	r1, #25
 80015dc:	eb46 0306 	adc.w	r3, r6, r6
 80015e0:	fba0 0101 	umull	r0, r1, r0, r1
 80015e4:	f7fe fdf6 	bl	80001d4 <__aeabi_uldivmod>
 80015e8:	2164      	movs	r1, #100	; 0x64
 80015ea:	fbb0 f5f1 	udiv	r5, r0, r1
 80015ee:	fb01 0315 	mls	r3, r1, r5, r0
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	3332      	adds	r3, #50	; 0x32
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	f003 0207 	and.w	r2, r3, #7
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	6821      	ldr	r1, [r4, #0]
 8001602:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8001606:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800160a:	4413      	add	r3, r2
 800160c:	608b      	str	r3, [r1, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800160e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001610:	f7ff ff96 	bl	8001540 <HAL_RCC_GetPCLK1Freq>
 8001614:	e7dd      	b.n	80015d2 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001616:	4293      	cmp	r3, r2
 8001618:	d002      	beq.n	8001620 <UART_SetConfig+0xa0>
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <UART_SetConfig+0xdc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d117      	bne.n	8001650 <UART_SetConfig+0xd0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001620:	f7ff ff9e 	bl	8001560 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001624:	6863      	ldr	r3, [r4, #4]
 8001626:	2119      	movs	r1, #25
 8001628:	009a      	lsls	r2, r3, #2
 800162a:	fba0 0101 	umull	r0, r1, r0, r1
 800162e:	0f9b      	lsrs	r3, r3, #30
 8001630:	f7fe fdd0 	bl	80001d4 <__aeabi_uldivmod>
 8001634:	2264      	movs	r2, #100	; 0x64
 8001636:	fbb0 f1f2 	udiv	r1, r0, r2
 800163a:	fb02 0311 	mls	r3, r2, r1, r0
 800163e:	6824      	ldr	r4, [r4, #0]
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	3332      	adds	r3, #50	; 0x32
 8001644:	fbb3 f3f2 	udiv	r3, r3, r2
 8001648:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800164c:	60a3      	str	r3, [r4, #8]
}
 800164e:	e7de      	b.n	800160e <UART_SetConfig+0x8e>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001650:	f7ff ff76 	bl	8001540 <HAL_RCC_GetPCLK1Freq>
 8001654:	e7e6      	b.n	8001624 <UART_SetConfig+0xa4>
 8001656:	bf00      	nop
 8001658:	40011000 	.word	0x40011000
 800165c:	40011400 	.word	0x40011400

08001660 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	4604      	mov	r4, r0
 8001664:	460e      	mov	r6, r1
 8001666:	4617      	mov	r7, r2
 8001668:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800166a:	6821      	ldr	r1, [r4, #0]
 800166c:	680b      	ldr	r3, [r1, #0]
 800166e:	ea36 0303 	bics.w	r3, r6, r3
 8001672:	d101      	bne.n	8001678 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001674:	2000      	movs	r0, #0
 8001676:	e014      	b.n	80016a2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8001678:	1c6b      	adds	r3, r5, #1
 800167a:	d0f7      	beq.n	800166c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800167c:	b995      	cbnz	r5, 80016a4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001686:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	f022 0201 	bic.w	r2, r2, #1
 800168e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001690:	2320      	movs	r3, #32
 8001692:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001696:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800169a:	2300      	movs	r3, #0
 800169c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80016a0:	2003      	movs	r0, #3
}
 80016a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016a4:	f7fe ff60 	bl	8000568 <HAL_GetTick>
 80016a8:	1bc0      	subs	r0, r0, r7
 80016aa:	4285      	cmp	r5, r0
 80016ac:	d2dd      	bcs.n	800166a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80016ae:	e7e6      	b.n	800167e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080016b0 <HAL_UART_Init>:
{
 80016b0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80016b2:	4604      	mov	r4, r0
 80016b4:	b340      	cbz	r0, 8001708 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80016b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016be:	b91b      	cbnz	r3, 80016c8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80016c0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80016c4:	f001 fd42 	bl	800314c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80016c8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80016ca:	2324      	movs	r3, #36	; 0x24
 80016cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80016d0:	68d3      	ldr	r3, [r2, #12]
 80016d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016d6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff ff51 	bl	8001580 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016ee:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016f6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016f8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80016fa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016fc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80016fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001702:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001706:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001708:	2001      	movs	r0, #1
 800170a:	e7fc      	b.n	8001706 <HAL_UART_Init+0x56>

0800170c <HAL_UART_Transmit>:
{
 800170c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001710:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001712:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001716:	2b20      	cmp	r3, #32
{
 8001718:	4604      	mov	r4, r0
 800171a:	460d      	mov	r5, r1
 800171c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800171e:	d14f      	bne.n	80017c0 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001720:	2900      	cmp	r1, #0
 8001722:	d04b      	beq.n	80017bc <HAL_UART_Transmit+0xb0>
 8001724:	2a00      	cmp	r2, #0
 8001726:	d049      	beq.n	80017bc <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8001728:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800172c:	2b01      	cmp	r3, #1
 800172e:	d047      	beq.n	80017c0 <HAL_UART_Transmit+0xb4>
 8001730:	2301      	movs	r3, #1
 8001732:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001736:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800173a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800173c:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001740:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001744:	f7fe ff10 	bl	8000568 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001748:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800174c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800174e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001752:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001756:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001758:	b29b      	uxth	r3, r3
 800175a:	b953      	cbnz	r3, 8001772 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	4632      	mov	r2, r6
 8001760:	2140      	movs	r1, #64	; 0x40
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff ff7c 	bl	8001660 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001768:	b998      	cbnz	r0, 8001792 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 800176a:	2320      	movs	r3, #32
 800176c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001770:	e010      	b.n	8001794 <HAL_UART_Transmit+0x88>
      huart->TxXferCount--;
 8001772:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001774:	3b01      	subs	r3, #1
 8001776:	b29b      	uxth	r3, r3
 8001778:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800177a:	68a3      	ldr	r3, [r4, #8]
 800177c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001780:	4632      	mov	r2, r6
 8001782:	463b      	mov	r3, r7
 8001784:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001788:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800178a:	d10e      	bne.n	80017aa <HAL_UART_Transmit+0x9e>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800178c:	f7ff ff68 	bl	8001660 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001790:	b110      	cbz	r0, 8001798 <HAL_UART_Transmit+0x8c>
          return HAL_TIMEOUT;
 8001792:	2003      	movs	r0, #3
}
 8001794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001798:	882b      	ldrh	r3, [r5, #0]
 800179a:	6822      	ldr	r2, [r4, #0]
 800179c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a0:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80017a2:	6923      	ldr	r3, [r4, #16]
 80017a4:	b943      	cbnz	r3, 80017b8 <HAL_UART_Transmit+0xac>
          pData += 2U;
 80017a6:	3502      	adds	r5, #2
 80017a8:	e7d5      	b.n	8001756 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017aa:	f7ff ff59 	bl	8001660 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80017ae:	2800      	cmp	r0, #0
 80017b0:	d1ef      	bne.n	8001792 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	782a      	ldrb	r2, [r5, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	3501      	adds	r5, #1
 80017ba:	e7cc      	b.n	8001756 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80017bc:	2001      	movs	r0, #1
 80017be:	e7e9      	b.n	8001794 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 80017c0:	2002      	movs	r0, #2
 80017c2:	e7e7      	b.n	8001794 <HAL_UART_Transmit+0x88>

080017c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80017c6:	3b01      	subs	r3, #1
 80017c8:	d00f      	beq.n	80017ea <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80017ca:	6902      	ldr	r2, [r0, #16]
 80017cc:	2a00      	cmp	r2, #0
 80017ce:	dafa      	bge.n	80017c6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80017d0:	6903      	ldr	r3, [r0, #16]
 80017d2:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <USB_CoreReset+0x2c>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80017da:	3a01      	subs	r2, #1
 80017dc:	d005      	beq.n	80017ea <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80017de:	6903      	ldr	r3, [r0, #16]
 80017e0:	f013 0301 	ands.w	r3, r3, #1
 80017e4:	d1f9      	bne.n	80017da <USB_CoreReset+0x16>

  return HAL_OK;
 80017e6:	4618      	mov	r0, r3
 80017e8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80017ea:	2003      	movs	r0, #3
}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	00030d41 	.word	0x00030d41

080017f4 <USB_CoreInit>:
{
 80017f4:	b084      	sub	sp, #16
 80017f6:	b538      	push	{r3, r4, r5, lr}
 80017f8:	ad05      	add	r5, sp, #20
 80017fa:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80017fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001800:	2b01      	cmp	r3, #1
{
 8001802:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001804:	d125      	bne.n	8001852 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001806:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800180e:	68c3      	ldr	r3, [r0, #12]
 8001810:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001818:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800181a:	68c3      	ldr	r3, [r0, #12]
 800181c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001820:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001824:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001826:	bf02      	ittt	eq
 8001828:	68c3      	ldreq	r3, [r0, #12]
 800182a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800182e:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001830:	f7ff ffc8 	bl	80017c4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001834:	9b08      	ldr	r3, [sp, #32]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800183a:	68a3      	ldr	r3, [r4, #8]
 800183c:	f043 0306 	orr.w	r3, r3, #6
 8001840:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001842:	68a3      	ldr	r3, [r4, #8]
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	60a3      	str	r3, [r4, #8]
}
 800184a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800184e:	b004      	add	sp, #16
 8001850:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001852:	68c3      	ldr	r3, [r0, #12]
 8001854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001858:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800185a:	f7ff ffb3 	bl	80017c4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800185e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001860:	b923      	cbnz	r3, 800186c <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001868:	63a3      	str	r3, [r4, #56]	; 0x38
 800186a:	e7e3      	b.n	8001834 <USB_CoreInit+0x40>
 800186c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800186e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001872:	e7f9      	b.n	8001868 <USB_CoreInit+0x74>

08001874 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001874:	6883      	ldr	r3, [r0, #8]
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6083      	str	r3, [r0, #8]
}
 800187c:	2000      	movs	r0, #0
 800187e:	4770      	bx	lr

08001880 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001880:	6883      	ldr	r3, [r0, #8]
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6083      	str	r3, [r0, #8]
}
 8001888:	2000      	movs	r0, #0
 800188a:	4770      	bx	lr

0800188c <USB_SetCurrentMode>:
{
 800188c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800188e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001890:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001892:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001896:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001898:	d108      	bne.n	80018ac <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800189a:	68c3      	ldr	r3, [r0, #12]
 800189c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80018a0:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80018a2:	2032      	movs	r0, #50	; 0x32
 80018a4:	f7fe fe66 	bl	8000574 <HAL_Delay>
  return HAL_OK;
 80018a8:	2000      	movs	r0, #0
}
 80018aa:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80018ac:	b919      	cbnz	r1, 80018b6 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80018ae:	68c3      	ldr	r3, [r0, #12]
 80018b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018b4:	e7f4      	b.n	80018a0 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80018b6:	2001      	movs	r0, #1
 80018b8:	e7f7      	b.n	80018aa <USB_SetCurrentMode+0x1e>
	...

080018bc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80018bc:	0189      	lsls	r1, r1, #6
 80018be:	f041 0120 	orr.w	r1, r1, #32
 80018c2:	4a06      	ldr	r2, [pc, #24]	; (80018dc <USB_FlushTxFifo+0x20>)
 80018c4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80018c6:	3a01      	subs	r2, #1
 80018c8:	d005      	beq.n	80018d6 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80018ca:	6903      	ldr	r3, [r0, #16]
 80018cc:	f013 0320 	ands.w	r3, r3, #32
 80018d0:	d1f9      	bne.n	80018c6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80018d2:	4618      	mov	r0, r3
 80018d4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80018d6:	2003      	movs	r0, #3
}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	00030d41 	.word	0x00030d41

080018e0 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80018e0:	2310      	movs	r3, #16
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <USB_FlushRxFifo+0x1c>)
 80018e4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80018e6:	3a01      	subs	r2, #1
 80018e8:	d005      	beq.n	80018f6 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80018ea:	6903      	ldr	r3, [r0, #16]
 80018ec:	f013 0310 	ands.w	r3, r3, #16
 80018f0:	d1f9      	bne.n	80018e6 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80018f2:	4618      	mov	r0, r3
 80018f4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80018f6:	2003      	movs	r0, #3
}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	00030d41 	.word	0x00030d41

08001900 <USB_WritePacket>:
{
 8001900:	b510      	push	{r4, lr}
 8001902:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8001906:	b94c      	cbnz	r4, 800191c <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8001908:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800190a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    count32b = ((uint32_t)len + 3U) / 4U;
 800190e:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001910:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001914:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8001918:	4299      	cmp	r1, r3
 800191a:	d101      	bne.n	8001920 <USB_WritePacket+0x20>
}
 800191c:	2000      	movs	r0, #0
 800191e:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001920:	f851 2b04 	ldr.w	r2, [r1], #4
 8001924:	6002      	str	r2, [r0, #0]
 8001926:	e7f7      	b.n	8001918 <USB_WritePacket+0x18>

08001928 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8001928:	3203      	adds	r2, #3
 800192a:	0892      	lsrs	r2, r2, #2
 800192c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001930:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8001934:	4291      	cmp	r1, r2
 8001936:	d101      	bne.n	800193c <USB_ReadPacket+0x14>
}
 8001938:	4608      	mov	r0, r1
 800193a:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800193c:	6803      	ldr	r3, [r0, #0]
 800193e:	f841 3b04 	str.w	r3, [r1], #4
 8001942:	e7f7      	b.n	8001934 <USB_ReadPacket+0xc>

08001944 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8001944:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8001946:	6980      	ldr	r0, [r0, #24]
}
 8001948:	4010      	ands	r0, r2
 800194a:	4770      	bx	lr

0800194c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800194c:	6940      	ldr	r0, [r0, #20]
}
 800194e:	f000 0001 	and.w	r0, r0, #1
 8001952:	4770      	bx	lr

08001954 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001954:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8001958:	f023 0303 	bic.w	r3, r3, #3
{
 800195c:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800195e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001962:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8001966:	f001 0303 	and.w	r3, r1, #3
 800196a:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 800196c:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800196e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001972:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8001976:	d104      	bne.n	8001982 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8001978:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 800197c:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 800197e:	2000      	movs	r0, #0
 8001980:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8001982:	2902      	cmp	r1, #2
 8001984:	d1fb      	bne.n	800197e <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8001986:	f241 7370 	movw	r3, #6000	; 0x1770
 800198a:	e7f7      	b.n	800197c <USB_InitFSLSPClkSel+0x28>

0800198c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800198c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 800198e:	2500      	movs	r5, #0
 8001990:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8001992:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8001996:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8001998:	9b01      	ldr	r3, [sp, #4]
 800199a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800199e:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80019a0:	9b01      	ldr	r3, [sp, #4]
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80019a6:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80019a8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80019ac:	2064      	movs	r0, #100	; 0x64
 80019ae:	f7fe fde1 	bl	8000574 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80019b2:	9b01      	ldr	r3, [sp, #4]
 80019b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019b8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 80019bc:	200a      	movs	r0, #10
 80019be:	f7fe fdd9 	bl	8000574 <HAL_Delay>

  return HAL_OK;
}
 80019c2:	4628      	mov	r0, r5
 80019c4:	b003      	add	sp, #12
 80019c6:	bd30      	pop	{r4, r5, pc}

080019c8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80019c8:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80019ce:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80019d2:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80019d4:	9b01      	ldr	r3, [sp, #4]
 80019d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80019da:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80019dc:	9b01      	ldr	r3, [sp, #4]
 80019de:	04da      	lsls	r2, r3, #19
 80019e0:	d406      	bmi.n	80019f0 <USB_DriveVbus+0x28>
 80019e2:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80019e4:	bf02      	ittt	eq
 80019e6:	9b01      	ldreq	r3, [sp, #4]
 80019e8:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80019ec:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80019f0:	9b01      	ldr	r3, [sp, #4]
 80019f2:	04db      	lsls	r3, r3, #19
 80019f4:	d505      	bpl.n	8001a02 <USB_DriveVbus+0x3a>
 80019f6:	b921      	cbnz	r1, 8001a02 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80019f8:	9b01      	ldr	r3, [sp, #4]
 80019fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019fe:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8001a02:	2000      	movs	r0, #0
 8001a04:	b002      	add	sp, #8
 8001a06:	4770      	bx	lr

08001a08 <USB_HostInit>:
{
 8001a08:	b084      	sub	sp, #16
 8001a0a:	b538      	push	{r3, r4, r5, lr}
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	a805      	add	r0, sp, #20
 8001a10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001a1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a20:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001a22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a24:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001a28:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a30:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8001a32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a34:	05da      	lsls	r2, r3, #23
 8001a36:	d53f      	bpl.n	8001ab8 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8001a38:	9b07      	ldr	r3, [sp, #28]
 8001a3a:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8001a3c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8001a40:	d13c      	bne.n	8001abc <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8001a42:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8001a46:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7ff ff35 	bl	80018bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8001a52:	4620      	mov	r0, r4
 8001a54:	f7ff ff44 	bl	80018e0 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9906      	ldr	r1, [sp, #24]
 8001a5c:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 8001a64:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8001a66:	4299      	cmp	r1, r3
 8001a68:	d12b      	bne.n	8001ac2 <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff ffab 	bl	80019c8 <USB_DriveVbus>
  HAL_Delay(200U);
 8001a72:	20c8      	movs	r0, #200	; 0xc8
 8001a74:	f7fe fd7e 	bl	8000574 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a80:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8001a82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a84:	05db      	lsls	r3, r3, #23
 8001a86:	d521      	bpl.n	8001acc <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8001a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a8c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8001a8e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001a92:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8001a96:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8001a9a:	9b08      	ldr	r3, [sp, #32]
 8001a9c:	b91b      	cbnz	r3, 8001aa6 <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001a9e:	69a3      	ldr	r3, [r4, #24]
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8001aa6:	69a2      	ldr	r2, [r4, #24]
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <USB_HostInit+0xd8>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61a3      	str	r3, [r4, #24]
}
 8001aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	b004      	add	sp, #16
 8001ab6:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8001ab8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8001abc:	f023 0304 	bic.w	r3, r3, #4
 8001ac0:	e7c1      	b.n	8001a46 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8001ac2:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8001ac4:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8001ac6:	60d5      	str	r5, [r2, #12]
 8001ac8:	3220      	adds	r2, #32
 8001aca:	e7cc      	b.n	8001a66 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8001ad0:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8001ad4:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8001ad6:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <USB_HostInit+0xdc>)
 8001ad8:	e7dd      	b.n	8001a96 <USB_HostInit+0x8e>
 8001ada:	bf00      	nop
 8001adc:	00e00300 	.word	0x00e00300
 8001ae0:	a3200008 	.word	0xa3200008
 8001ae4:	004000e0 	.word	0x004000e0

08001ae8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8001ae8:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8001aee:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8001af2:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8001af4:	9801      	ldr	r0, [sp, #4]
}
 8001af6:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8001afa:	b002      	add	sp, #8
 8001afc:	4770      	bx	lr

08001afe <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8001afe:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001b02:	6880      	ldr	r0, [r0, #8]
}
 8001b04:	b280      	uxth	r0, r0
 8001b06:	4770      	bx	lr

08001b08 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8001b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8001b0c:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8001b10:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8001b14:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8001b18:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8001b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b1e:	60a0      	str	r0, [r4, #8]
 8001b20:	fa4f f882 	sxtb.w	r8, r2
 8001b24:	f505 6e80 	add.w	lr, r5, #1024	; 0x400
 8001b28:	f001 0c0f 	and.w	ip, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8001b2c:	2e03      	cmp	r6, #3
 8001b2e:	d86c      	bhi.n	8001c0a <USB_HC_Init+0x102>
 8001b30:	e8df f006 	tbb	[pc, r6]
 8001b34:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001b38:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8001b3c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001b40:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8001b42:	da03      	bge.n	8001b4c <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8001b44:	68e1      	ldr	r1, [r4, #12]
 8001b46:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001b4a:	e005      	b.n	8001b58 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8001b4c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8001b4e:	05c9      	lsls	r1, r1, #23
 8001b50:	d542      	bpl.n	8001bd8 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8001b52:	68e1      	ldr	r1, [r4, #12]
 8001b54:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8001b58:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b5a:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8001b5c:	f8de 4018 	ldr.w	r4, [lr, #24]
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f10c 	lsl.w	r1, r1, ip
 8001b66:	4321      	orrs	r1, r4
 8001b68:	f8ce 1018 	str.w	r1, [lr, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8001b6c:	69a9      	ldr	r1, [r5, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8001b6e:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8001b72:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001b76:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8001b78:	bfac      	ite	ge
 8001b7a:	2400      	movge	r4, #0
 8001b7c:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8001b80:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8001b84:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8001b88:	059b      	lsls	r3, r3, #22
 8001b8a:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8001b8e:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8001b92:	02d2      	lsls	r2, r2, #11
 8001b94:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8001b98:	432b      	orrs	r3, r5
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	04b2      	lsls	r2, r6, #18
 8001b9e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8001ba2:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8001ba4:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8001ba8:	bf14      	ite	ne
 8001baa:	2100      	movne	r1, #0
 8001bac:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8001bb0:	4323      	orrs	r3, r4
 8001bb2:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8001bb4:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8001bb6:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8001bba:	d105      	bne.n	8001bc8 <USB_HC_Init+0xc0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8001bbc:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8001bc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bc4:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
}
 8001bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001bcc:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8001bd0:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001bd4:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8001bd6:	dbb5      	blt.n	8001b44 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8001bd8:	f8de 0018 	ldr.w	r0, [lr, #24]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f10c 	lsl.w	r1, r1, ip
 8001be2:	4301      	orrs	r1, r0
 8001be4:	f8ce 1018 	str.w	r1, [lr, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8001be8:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bea:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8001bec:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001bf0:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	e7c4      	b.n	8001b80 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001bf6:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8001bfa:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001bfe:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8001c00:	daea      	bge.n	8001bd8 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8001c02:	68e1      	ldr	r1, [r4, #12]
 8001c04:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8001c08:	e7a6      	b.n	8001b58 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	e7a6      	b.n	8001b5c <USB_HC_Init+0x54>

08001c0e <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8001c0e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001c12:	6940      	ldr	r0, [r0, #20]
}
 8001c14:	b280      	uxth	r0, r0
 8001c16:	4770      	bx	lr

08001c18 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001c18:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8001c1c:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8001c20:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8001c24:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001c28:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8001c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c30:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8001c34:	d11e      	bne.n	8001c74 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8001c36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c38:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001c3c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8001c40:	d137      	bne.n	8001cb2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001c42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c46:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001c4a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8001c4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c52:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8001c56:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8001c5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c5e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8001c62:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8001c66:	3b01      	subs	r3, #1
 8001c68:	d002      	beq.n	8001c70 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001c6a:	6811      	ldr	r1, [r2, #0]
 8001c6c:	2900      	cmp	r1, #0
 8001c6e:	dbfa      	blt.n	8001c66 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8001c70:	2000      	movs	r0, #0
 8001c72:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8001c74:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8001c78:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001c7c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8001c80:	d117      	bne.n	8001cb2 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001c82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c86:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001c8a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8001c8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c92:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8001c96:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8001c9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c9e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8001ca2:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	d0e2      	beq.n	8001c70 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001caa:	6811      	ldr	r1, [r2, #0]
 8001cac:	2900      	cmp	r1, #0
 8001cae:	dbfa      	blt.n	8001ca6 <USB_HC_Halt+0x8e>
 8001cb0:	e7de      	b.n	8001c70 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cb6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8001cba:	e7d9      	b.n	8001c70 <USB_HC_Halt+0x58>

08001cbc <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8001cbc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8001cc0:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <USB_DoPing+0x20>)
 8001cc2:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8001cc6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001cca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8001cd2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	80080000 	.word	0x80080000

08001ce0 <USB_HC_StartXfer>:
{
 8001ce0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8001ce4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001ce6:	05db      	lsls	r3, r3, #23
{
 8001ce8:	4616      	mov	r6, r2
 8001cea:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8001cec:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8001cee:	d517      	bpl.n	8001d20 <USB_HC_StartXfer+0x40>
 8001cf0:	790d      	ldrb	r5, [r1, #4]
 8001cf2:	b9ad      	cbnz	r5, 8001d20 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8001cf4:	b94e      	cbnz	r6, 8001d0a <USB_HC_StartXfer+0x2a>
 8001cf6:	794b      	ldrb	r3, [r1, #5]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d111      	bne.n	8001d20 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	f7ff ffdd 	bl	8001cbc <USB_DoPing>
}
 8001d02:	2000      	movs	r0, #0
 8001d04:	b002      	add	sp, #8
 8001d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8001d0a:	2e01      	cmp	r6, #1
 8001d0c:	d108      	bne.n	8001d20 <USB_HC_StartXfer+0x40>
 8001d0e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8001d12:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8001d16:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8001d1a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8001d1e:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8001d20:	6908      	ldr	r0, [r1, #16]
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d062      	beq.n	8001dec <USB_HC_StartXfer+0x10c>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8001d26:	890b      	ldrh	r3, [r1, #8]
 8001d28:	3801      	subs	r0, #1
 8001d2a:	4418      	add	r0, r3
 8001d2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d30:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8001d32:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001d36:	d903      	bls.n	8001d40 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8001d3c:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8001d40:	78cf      	ldrb	r7, [r1, #3]
 8001d42:	b117      	cbz	r7, 8001d4a <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8001d44:	890b      	ldrh	r3, [r1, #8]
 8001d46:	4343      	muls	r3, r0
 8001d48:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8001d4a:	f891 c00a 	ldrb.w	ip, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8001d4e:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8001d50:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8001d54:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8001d58:	f3c3 0812 	ubfx	r8, r3, #0, #19
 8001d5c:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8001d60:	ea4c 0c08 	orr.w	ip, ip, r8
 8001d64:	ea4c 40c0 	orr.w	r0, ip, r0, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8001d68:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8001d6c:	b116      	cbz	r6, 8001d74 <USB_HC_StartXfer+0x94>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8001d6e:	68c8      	ldr	r0, [r1, #12]
 8001d70:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8001d74:	f504 6c80 	add.w	ip, r4, #1024	; 0x400
 8001d78:	f8dc 0008 	ldr.w	r0, [ip, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8001d7c:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 8001d80:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
 8001d84:	f8c5 e500 	str.w	lr, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8001d88:	43c0      	mvns	r0, r0
 8001d8a:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 8001d8e:	0740      	lsls	r0, r0, #29
 8001d90:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8001d94:	ea40 000e 	orr.w	r0, r0, lr
 8001d98:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d9c:	4825      	ldr	r0, [pc, #148]	; (8001e34 <USB_HC_StartXfer+0x154>)
 8001d9e:	f8d5 e500 	ldr.w	lr, [r5, #1280]	; 0x500
 8001da2:	f8c0 e000 	str.w	lr, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001da6:	f8d0 e000 	ldr.w	lr, [r0]
 8001daa:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
 8001dae:	f8c0 e000 	str.w	lr, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8001db2:	f8d0 e000 	ldr.w	lr, [r0]
  if (hc->ep_is_in != 0U)
 8001db6:	b1df      	cbz	r7, 8001df0 <USB_HC_StartXfer+0x110>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8001db8:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8001dbc:	f8c0 e000 	str.w	lr, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dc0:	f8d0 e000 	ldr.w	lr, [r0]
 8001dc4:	f04e 4e00 	orr.w	lr, lr, #2147483648	; 0x80000000
 8001dc8:	f8c0 e000 	str.w	lr, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001dcc:	6800      	ldr	r0, [r0, #0]
 8001dce:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8001dd2:	2e00      	cmp	r6, #0
 8001dd4:	d195      	bne.n	8001d02 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8001dd6:	2f00      	cmp	r7, #0
 8001dd8:	d193      	bne.n	8001d02 <USB_HC_StartXfer+0x22>
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d091      	beq.n	8001d02 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8001dde:	79c8      	ldrb	r0, [r1, #7]
 8001de0:	2803      	cmp	r0, #3
 8001de2:	d813      	bhi.n	8001e0c <USB_HC_StartXfer+0x12c>
 8001de4:	e8df f000 	tbb	[pc, r0]
 8001de8:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8001dec:	2001      	movs	r0, #1
 8001dee:	e7a7      	b.n	8001d40 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8001df0:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 8001df4:	e7e2      	b.n	8001dbc <USB_HC_StartXfer+0xdc>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8001df6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8001df8:	1cd8      	adds	r0, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8001dfa:	b2ad      	uxth	r5, r5
 8001dfc:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8001e00:	4285      	cmp	r5, r0
 8001e02:	d203      	bcs.n	8001e0c <USB_HC_StartXfer+0x12c>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8001e04:	69a0      	ldr	r0, [r4, #24]
 8001e06:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8001e0a:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	9000      	str	r0, [sp, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	68c9      	ldr	r1, [r1, #12]
 8001e14:	4620      	mov	r0, r4
 8001e16:	f7ff fd73 	bl	8001900 <USB_WritePacket>
 8001e1a:	e772      	b.n	8001d02 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8001e1c:	f8dc 5010 	ldr.w	r5, [ip, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8001e20:	1cd8      	adds	r0, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8001e22:	b2ad      	uxth	r5, r5
 8001e24:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8001e28:	4285      	cmp	r5, r0
 8001e2a:	d2ef      	bcs.n	8001e0c <USB_HC_StartXfer+0x12c>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8001e2c:	69a0      	ldr	r0, [r4, #24]
 8001e2e:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8001e32:	e7ea      	b.n	8001e0a <USB_HC_StartXfer+0x12a>
 8001e34:	200000ac 	.word	0x200000ac

08001e38 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001e38:	6883      	ldr	r3, [r0, #8]
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8001e3e:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e40:	2110      	movs	r1, #16
{
 8001e42:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001e44:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e46:	f7ff fd39 	bl	80018bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7ff fd48 	bl	80018e0 <USB_FlushRxFifo>
 8001e50:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8001e54:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8001e58:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8001e5a:	6811      	ldr	r1, [r2, #0]
 8001e5c:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8001e60:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8001e64:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8001e68:	4282      	cmp	r2, r0
 8001e6a:	d1f6      	bne.n	8001e5a <USB_StopHost+0x22>
  uint32_t count = 0U;
 8001e6c:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8001e74:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8001e78:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8001e7a:	3001      	adds	r0, #1
 8001e7c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e80:	d802      	bhi.n	8001e88 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	2900      	cmp	r1, #0
 8001e86:	dbf8      	blt.n	8001e7a <USB_StopHost+0x42>
 8001e88:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d1ef      	bne.n	8001e6e <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e92:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8001e96:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001e98:	68a3      	ldr	r3, [r4, #8]
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	bd10      	pop	{r4, pc}

08001ea4 <USBH_HID_SOFProcess>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001ea4:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8001ea8:	69db      	ldr	r3, [r3, #28]

  if(HID_Handle->state == HID_POLL)
 8001eaa:	789a      	ldrb	r2, [r3, #2]
 8001eac:	2a06      	cmp	r2, #6
 8001eae:	d108      	bne.n	8001ec2 <USBH_HID_SOFProcess+0x1e>
  {
    if(( phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8001eb0:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8001eb4:	6a19      	ldr	r1, [r3, #32]
 8001eb6:	1a52      	subs	r2, r2, r1
 8001eb8:	8b99      	ldrh	r1, [r3, #28]
 8001eba:	428a      	cmp	r2, r1
    {
      HID_Handle->state = HID_GET_DATA;
 8001ebc:	bf24      	itt	cs
 8001ebe:	2204      	movcs	r2, #4
 8001ec0:	709a      	strbcs	r2, [r3, #2]
#endif
#endif
    }
  }
  return USBH_OK;
}
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	4770      	bx	lr

08001ec6 <USBH_HID_InterfaceDeInit>:
{
 8001ec6:	b538      	push	{r3, r4, r5, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001ec8:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8001ecc:	69dd      	ldr	r5, [r3, #28]
  if(HID_Handle->InPipe != 0x00U)
 8001ece:	7869      	ldrb	r1, [r5, #1]
{
 8001ed0:	4604      	mov	r4, r0
  if(HID_Handle->InPipe != 0x00U)
 8001ed2:	b139      	cbz	r1, 8001ee4 <USBH_HID_InterfaceDeInit+0x1e>
    USBH_ClosePipe  (phost, HID_Handle->InPipe);
 8001ed4:	f000 ff77 	bl	8002dc6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->InPipe);
 8001ed8:	7869      	ldrb	r1, [r5, #1]
 8001eda:	4620      	mov	r0, r4
 8001edc:	f000 ff8f 	bl	8002dfe <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	706b      	strb	r3, [r5, #1]
  if(HID_Handle->OutPipe != 0x00U)
 8001ee4:	7829      	ldrb	r1, [r5, #0]
 8001ee6:	b141      	cbz	r1, 8001efa <USBH_HID_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f000 ff6c 	bl	8002dc6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, HID_Handle->OutPipe);
 8001eee:	7829      	ldrb	r1, [r5, #0]
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f000 ff84 	bl	8002dfe <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	702b      	strb	r3, [r5, #0]
  if(phost->pActiveClass->pData)
 8001efa:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8001efe:	69d8      	ldr	r0, [r3, #28]
 8001f00:	b128      	cbz	r0, 8001f0e <USBH_HID_InterfaceDeInit+0x48>
    USBH_free (phost->pActiveClass->pData);
 8001f02:	f001 fb1f 	bl	8003544 <free>
    phost->pActiveClass->pData = 0U;
 8001f06:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
}
 8001f0e:	2000      	movs	r0, #0
 8001f10:	bd38      	pop	{r3, r4, r5, pc}
	...

08001f14 <USBH_HID_InterfaceInit>:
{
 8001f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8001f18:	f8d0 1378 	ldr.w	r1, [r0, #888]	; 0x378
{
 8001f1c:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8001f1e:	7909      	ldrb	r1, [r1, #4]
 8001f20:	23ff      	movs	r3, #255	; 0xff
 8001f22:	2201      	movs	r2, #1
{
 8001f24:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8001f26:	f000 fb34 	bl	8002592 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8001f2a:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8001f2c:	4601      	mov	r1, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8001f2e:	d103      	bne.n	8001f38 <USBH_HID_InterfaceInit+0x24>
    status = USBH_FAIL;
 8001f30:	2002      	movs	r0, #2
}
 8001f32:	b005      	add	sp, #20
 8001f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    USBH_SelectInterface (phost, interface);
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f000 fb21 	bl	8002580 <USBH_SelectInterface>
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8001f3e:	2034      	movs	r0, #52	; 0x34
 8001f40:	f8d5 6378 	ldr.w	r6, [r5, #888]	; 0x378
 8001f44:	f001 faf6 	bl	8003534 <malloc>
    HID_Handle->state = HID_ERROR;
 8001f48:	2307      	movs	r3, #7
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8001f4a:	61f0      	str	r0, [r6, #28]
    HID_Handle->state = HID_ERROR;
 8001f4c:	7083      	strb	r3, [r0, #2]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8001f4e:	f895 3320 	ldrb.w	r3, [r5, #800]	; 0x320
 8001f52:	221a      	movs	r2, #26
 8001f54:	fb02 5203 	mla	r2, r2, r3, r5
    phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc (sizeof(HID_HandleTypeDef));
 8001f58:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8001f5a:	f892 2345 	ldrb.w	r2, [r2, #837]	; 0x345
 8001f5e:	2a01      	cmp	r2, #1
 8001f60:	d124      	bne.n	8001fac <USBH_HID_InterfaceInit+0x98>
      HID_Handle->Init =  USBH_HID_KeybdInit;
 8001f62:	4a31      	ldr	r2, [pc, #196]	; (8002028 <USBH_HID_InterfaceInit+0x114>)
      HID_Handle->Init =  USBH_HID_MouseInit;
 8001f64:	6322      	str	r2, [r4, #48]	; 0x30
    HID_Handle->state     = HID_INIT;
 8001f66:	2200      	movs	r2, #0
 8001f68:	70a2      	strb	r2, [r4, #2]
    HID_Handle->ctl_state = HID_REQ_INIT;
 8001f6a:	7162      	strb	r2, [r4, #5]
    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 8001f6c:	221a      	movs	r2, #26
 8001f6e:	fb02 5103 	mla	r1, r2, r3, r5
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8001f72:	fb02 5303 	mla	r3, r2, r3, r5
    HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress;
 8001f76:	f891 034a 	ldrb.w	r0, [r1, #842]	; 0x34a
 8001f7a:	76a0      	strb	r0, [r4, #26]
    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8001f7c:	f8b1 034c 	ldrh.w	r0, [r1, #844]	; 0x34c
    HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bInterval ;
 8001f80:	f891 134e 	ldrb.w	r1, [r1, #846]	; 0x34e
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8001f84:	f893 7342 	ldrb.w	r7, [r3, #834]	; 0x342
    HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8001f88:	8320      	strh	r0, [r4, #24]
    if (HID_Handle->poll  < HID_MIN_POLL)
 8001f8a:	2909      	cmp	r1, #9
      HID_Handle->poll = HID_MIN_POLL;
 8001f8c:	bf98      	it	ls
 8001f8e:	210a      	movls	r1, #10
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8001f90:	2f02      	cmp	r7, #2
      HID_Handle->poll = HID_MIN_POLL;
 8001f92:	83a1      	strh	r1, [r4, #28]
    max_ep = ( (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8001f94:	bf28      	it	cs
 8001f96:	2702      	movcs	r7, #2
    for ( ;num < max_ep; num++)
 8001f98:	2600      	movs	r6, #0
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8001f9a:	f04f 091a 	mov.w	r9, #26
        USBH_OpenPipe  (phost,
 8001f9e:	f04f 0803 	mov.w	r8, #3
    for ( ;num < max_ep; num++)
 8001fa2:	b2f3      	uxtb	r3, r6
 8001fa4:	429f      	cmp	r7, r3
 8001fa6:	d805      	bhi.n	8001fb4 <USBH_HID_InterfaceInit+0xa0>
    status = USBH_OK;
 8001fa8:	2000      	movs	r0, #0
 8001faa:	e7c2      	b.n	8001f32 <USBH_HID_InterfaceInit+0x1e>
    else if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8001fac:	2a02      	cmp	r2, #2
 8001fae:	d1bf      	bne.n	8001f30 <USBH_HID_InterfaceInit+0x1c>
      HID_Handle->Init =  USBH_HID_MouseInit;
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <USBH_HID_InterfaceInit+0x118>)
 8001fb2:	e7d7      	b.n	8001f64 <USBH_HID_InterfaceInit+0x50>
      if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8001fb4:	f895 3320 	ldrb.w	r3, [r5, #800]	; 0x320
 8001fb8:	3601      	adds	r6, #1
 8001fba:	fb09 f303 	mul.w	r3, r9, r3
 8001fbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8001fc2:	442b      	add	r3, r5
 8001fc4:	f893 1342 	ldrb.w	r1, [r3, #834]	; 0x342
 8001fc8:	060b      	lsls	r3, r1, #24
 8001fca:	d517      	bpl.n	8001ffc <USBH_HID_InterfaceInit+0xe8>
          USBH_AllocPipe(phost, HID_Handle->InEp);
 8001fcc:	4628      	mov	r0, r5
        HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8001fce:	7121      	strb	r1, [r4, #4]
          USBH_AllocPipe(phost, HID_Handle->InEp);
 8001fd0:	f000 fefe 	bl	8002dd0 <USBH_AllocPipe>
 8001fd4:	4601      	mov	r1, r0
        HID_Handle->InPipe  =\
 8001fd6:	7060      	strb	r0, [r4, #1]
        USBH_OpenPipe  (phost,
 8001fd8:	8b20      	ldrh	r0, [r4, #24]
 8001fda:	7922      	ldrb	r2, [r4, #4]
 8001fdc:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8001fe0:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8001fe4:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8001fe8:	9000      	str	r0, [sp, #0]
 8001fea:	4628      	mov	r0, r5
 8001fec:	f000 fedc 	bl	8002da8 <USBH_OpenPipe>
        USBH_LL_SetToggle (phost, HID_Handle->InPipe, 0U);
 8001ff0:	7861      	ldrb	r1, [r4, #1]
 8001ff2:	2200      	movs	r2, #0
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0U);
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	f001 fa2e 	bl	8003456 <USBH_LL_SetToggle>
 8001ffa:	e7d2      	b.n	8001fa2 <USBH_HID_InterfaceInit+0x8e>
          USBH_AllocPipe(phost, HID_Handle->OutEp);
 8001ffc:	4628      	mov	r0, r5
        HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8001ffe:	70e1      	strb	r1, [r4, #3]
          USBH_AllocPipe(phost, HID_Handle->OutEp);
 8002000:	f000 fee6 	bl	8002dd0 <USBH_AllocPipe>
 8002004:	4601      	mov	r1, r0
        HID_Handle->OutPipe  =\
 8002006:	7020      	strb	r0, [r4, #0]
        USBH_OpenPipe  (phost,
 8002008:	8b20      	ldrh	r0, [r4, #24]
 800200a:	78e2      	ldrb	r2, [r4, #3]
 800200c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8002010:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8002014:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002018:	9000      	str	r0, [sp, #0]
 800201a:	4628      	mov	r0, r5
 800201c:	f000 fec4 	bl	8002da8 <USBH_OpenPipe>
        USBH_LL_SetToggle (phost, HID_Handle->OutPipe, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	7821      	ldrb	r1, [r4, #0]
 8002024:	e7e6      	b.n	8001ff4 <USBH_HID_InterfaceInit+0xe0>
 8002026:	bf00      	nop
 8002028:	08002309 	.word	0x08002309
 800202c:	08002439 	.word	0x08002439

08002030 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor (USBH_HandleTypeDef *phost,
                                                    uint16_t length)
{
 8002030:	b507      	push	{r0, r1, r2, lr}

  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8002032:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8002036:	9100      	str	r1, [sp, #0]
 8002038:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800203c:	2101      	movs	r1, #1
 800203e:	f000 fd1f 	bl	8002a80 <USBH_GetDescriptor>
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
}
 8002042:	b003      	add	sp, #12
 8002044:	f85d fb04 	ldr.w	pc, [sp], #4

08002048 <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor (USBH_HandleTypeDef *phost,
                                              uint16_t length)
{
 8002048:	b507      	push	{r0, r1, r2, lr}
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800204a:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 800204e:	9100      	str	r1, [sp, #0]
 8002050:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8002054:	2101      	movs	r1, #1
 8002056:	f000 fd13 	bl	8002a80 <USBH_GetDescriptor>
                              USB_DESC_HID,
                              phost->device.Data,
                              length);

  return status;
}
 800205a:	b003      	add	sp, #12
 800205c:	f85d fb04 	ldr.w	pc, [sp], #4

08002060 <USBH_HID_SetIdle>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
    USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8002060:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
{
 8002064:	b410      	push	{r4}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 8002066:	f640 2421 	movw	r4, #2593	; 0xa21
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800206a:	8242      	strh	r2, [r0, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800206c:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE |\
 800206e:	8204      	strh	r4, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
 8002070:	6142      	str	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
 8002072:	4611      	mov	r1, r2
}
 8002074:	f85d 4b04 	ldr.w	r4, [sp], #4
  return USBH_CtlReq(phost, 0U, 0U);
 8002078:	f000 bc40 	b.w	80028fc <USBH_CtlReq>

0800207c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport (USBH_HandleTypeDef *phost,
                                    uint8_t reportType,
                                    uint8_t reportId,
                                    uint8_t* reportBuff,
                                    uint8_t reportLen)
{
 800207c:	b470      	push	{r4, r5, r6}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
    USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800207e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
{
 8002082:	f89d 400c 	ldrb.w	r4, [sp, #12]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8002086:	8242      	strh	r2, [r0, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8002088:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
 800208a:	f240 16a1 	movw	r6, #417	; 0x1a1
  phost->Control.setup.b.wIndex.w = 0U;
 800208e:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8002090:	b2a2      	uxth	r2, r4
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE |\
 8002092:	8206      	strh	r6, [r0, #16]
  phost->Control.setup.b.wLength.w = reportLen;
 8002094:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8002096:	4619      	mov	r1, r3
}
 8002098:	bc70      	pop	{r4, r5, r6}
  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800209a:	f000 bc2f 	b.w	80028fc <USBH_CtlReq>

0800209e <USBH_HID_SetProtocol>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800209e:	f640 3321 	movw	r3, #2849	; 0xb21
 80020a2:	8203      	strh	r3, [r0, #16]
 80020a4:	2300      	movs	r3, #0
                                                 | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
  if(protocol)
 80020a6:	b129      	cbz	r1, 80020b4 <USBH_HID_SetProtocol+0x16>
  {
    phost->Control.setup.b.wValue.w = 0U;
 80020a8:	8243      	strh	r3, [r0, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
 80020aa:	2200      	movs	r2, #0
  phost->Control.setup.b.wIndex.w = 0U;
 80020ac:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 80020ae:	4611      	mov	r1, r2
 80020b0:	f000 bc24 	b.w	80028fc <USBH_CtlReq>
    phost->Control.setup.b.wValue.w = 1U;
 80020b4:	2201      	movs	r2, #1
 80020b6:	8242      	strh	r2, [r0, #18]
 80020b8:	e7f7      	b.n	80020aa <USBH_HID_SetProtocol+0xc>

080020ba <USBH_HID_ClassRequest>:
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80020ba:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80020be:	b570      	push	{r4, r5, r6, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80020c0:	69dd      	ldr	r5, [r3, #28]
  switch (HID_Handle->ctl_state)
 80020c2:	796b      	ldrb	r3, [r5, #5]
{
 80020c4:	4604      	mov	r4, r0
  switch (HID_Handle->ctl_state)
 80020c6:	2b05      	cmp	r3, #5
 80020c8:	d808      	bhi.n	80020dc <USBH_HID_ClassRequest+0x22>
 80020ca:	e8df f003 	tbb	[pc, r3]
 80020ce:	0703      	.short	0x0703
 80020d0:	372d0326 	.word	0x372d0326
    if (USBH_HID_GetHIDDescriptor (phost, USB_HID_DESC_SIZE)== USBH_OK)
 80020d4:	2109      	movs	r1, #9
 80020d6:	f7ff ffb7 	bl	8002048 <USBH_HID_GetHIDDescriptor>
 80020da:	b108      	cbz	r0, 80020e0 <USBH_HID_ClassRequest+0x26>
  USBH_StatusTypeDef status         = USBH_BUSY;
 80020dc:	2601      	movs	r6, #1
 80020de:	e03a      	b.n	8002156 <USBH_HID_ClassRequest+0x9c>
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc (HID_DescTypeDef *desc, uint8_t *buf)
{

  desc->bLength                  = *(uint8_t  *) (buf + 0);
 80020e0:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80020e4:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
  desc->bDescriptorType          = *(uint8_t  *) (buf + 1);
 80020e8:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 80020ec:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
  desc->bcdHID                   =  LE16  (buf + 2);
 80020f0:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 80020f4:	852b      	strh	r3, [r5, #40]	; 0x28
  desc->bCountryCode             = *(uint8_t  *) (buf + 4);
 80020f6:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 80020fa:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
  desc->bNumDescriptors          = *(uint8_t  *) (buf + 5);
 80020fe:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8002102:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
  desc->bReportDescriptorType    = *(uint8_t  *) (buf + 6);
 8002106:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 800210a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  desc->wItemLength              =  LE16  (buf + 7);
 800210e:	f8b4 3123 	ldrh.w	r3, [r4, #291]	; 0x123
 8002112:	85eb      	strh	r3, [r5, #46]	; 0x2e
      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8002114:	2302      	movs	r3, #2
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8002116:	716b      	strb	r3, [r5, #5]
 8002118:	e7e0      	b.n	80020dc <USBH_HID_ClassRequest+0x22>
    if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 800211a:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 800211c:	f7ff ff88 	bl	8002030 <USBH_HID_GetHIDReportDescriptor>
 8002120:	2800      	cmp	r0, #0
 8002122:	d1db      	bne.n	80020dc <USBH_HID_ClassRequest+0x22>
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8002124:	2304      	movs	r3, #4
 8002126:	e7f6      	b.n	8002116 <USBH_HID_ClassRequest+0x5c>
    classReqStatus = USBH_HID_SetIdle (phost, 0U, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	4611      	mov	r1, r2
 800212c:	f7ff ff98 	bl	8002060 <USBH_HID_SetIdle>
    if (classReqStatus == USBH_OK)
 8002130:	b908      	cbnz	r0, 8002136 <USBH_HID_ClassRequest+0x7c>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8002132:	2305      	movs	r3, #5
 8002134:	e7ef      	b.n	8002116 <USBH_HID_ClassRequest+0x5c>
      if(classReqStatus == USBH_NOT_SUPPORTED)
 8002136:	2803      	cmp	r0, #3
 8002138:	d1d0      	bne.n	80020dc <USBH_HID_ClassRequest+0x22>
 800213a:	e7fa      	b.n	8002132 <USBH_HID_ClassRequest+0x78>
    if (USBH_HID_SetProtocol (phost, 0U) == USBH_OK)
 800213c:	2100      	movs	r1, #0
 800213e:	f7ff ffae 	bl	800209e <USBH_HID_SetProtocol>
 8002142:	4606      	mov	r6, r0
 8002144:	2800      	cmp	r0, #0
 8002146:	d1c9      	bne.n	80020dc <USBH_HID_ClassRequest+0x22>
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8002148:	2301      	movs	r3, #1
 800214a:	716b      	strb	r3, [r5, #5]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800214c:	2102      	movs	r1, #2
 800214e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8002152:	4620      	mov	r0, r4
 8002154:	4798      	blx	r3
}
 8002156:	4630      	mov	r0, r6
 8002158:	bd70      	pop	{r4, r5, r6, pc}

0800215a <USBH_HID_GetDeviceType>:
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
  HID_TypeTypeDef   type = HID_UNKNOWN;
  uint8_t InterfaceProtocol;

  if(phost->gState == HOST_CLASS)
 800215a:	7803      	ldrb	r3, [r0, #0]
 800215c:	2b0b      	cmp	r3, #11
 800215e:	d10d      	bne.n	800217c <USBH_HID_GetDeviceType+0x22>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8002160:	f890 3320 	ldrb.w	r3, [r0, #800]	; 0x320
 8002164:	221a      	movs	r2, #26
 8002166:	fb02 0003 	mla	r0, r2, r3, r0
 800216a:	f890 3345 	ldrb.w	r3, [r0, #837]	; 0x345
    if(InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800216e:	2b01      	cmp	r3, #1
 8002170:	d006      	beq.n	8002180 <USBH_HID_GetDeviceType+0x26>
    {
      type = HID_KEYBOARD;
    }
    else
    {
      if(InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8002172:	2b02      	cmp	r3, #2
      {
        type = HID_MOUSE;
 8002174:	bf14      	ite	ne
 8002176:	20ff      	movne	r0, #255	; 0xff
 8002178:	2001      	moveq	r0, #1
 800217a:	4770      	bx	lr
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800217c:	20ff      	movs	r0, #255	; 0xff
 800217e:	4770      	bx	lr
      type = HID_KEYBOARD;
 8002180:	2002      	movs	r0, #2
      }
    }
  }
  return type;
}
 8002182:	4770      	bx	lr

08002184 <USBH_HID_FifoInit>:
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef * f, uint8_t * buf, uint16_t size)
{
     f->head = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	6043      	str	r3, [r0, #4]
     f->tail = 0U;
     f->lock = 0U;
 8002188:	7283      	strb	r3, [r0, #10]
     f->size = size;
 800218a:	8102      	strh	r2, [r0, #8]
     f->buf = buf;
 800218c:	6001      	str	r1, [r0, #0]
}
 800218e:	4770      	bx	lr

08002190 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8002190:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t i;
  uint8_t * p;
  p = (uint8_t*) buf;

  if(f->lock == 0U)
 8002192:	7a85      	ldrb	r5, [r0, #10]
{
 8002194:	4603      	mov	r3, r0
  if(f->lock == 0U)
 8002196:	b11d      	cbz	r5, 80021a0 <USBH_HID_FifoRead+0x10>
        f->lock = 0U;
        return i;
      }
    }
  }
  f->lock = 0U;
 8002198:	2100      	movs	r1, #0
 800219a:	7299      	strb	r1, [r3, #10]

  return nbytes;
 800219c:	4610      	mov	r0, r2
}
 800219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f->lock = 1U;
 80021a0:	2401      	movs	r4, #1
 80021a2:	7284      	strb	r4, [r0, #10]
  p = (uint8_t*) buf;
 80021a4:	460e      	mov	r6, r1
 80021a6:	1a70      	subs	r0, r6, r1
 80021a8:	b280      	uxth	r0, r0
    for(i = 0U; i < nbytes; i++)
 80021aa:	4282      	cmp	r2, r0
 80021ac:	d9f4      	bls.n	8002198 <USBH_HID_FifoRead+0x8>
      if( f->tail != f->head)
 80021ae:	88dc      	ldrh	r4, [r3, #6]
 80021b0:	889f      	ldrh	r7, [r3, #4]
 80021b2:	42a7      	cmp	r7, r4
 80021b4:	d00c      	beq.n	80021d0 <USBH_HID_FifoRead+0x40>
        *p++ = f->buf[f->tail];
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	5d00      	ldrb	r0, [r0, r4]
 80021ba:	f806 0b01 	strb.w	r0, [r6], #1
        f->tail++;
 80021be:	88d8      	ldrh	r0, [r3, #6]
        if( f->tail == f->size)
 80021c0:	891c      	ldrh	r4, [r3, #8]
        f->tail++;
 80021c2:	3001      	adds	r0, #1
 80021c4:	b280      	uxth	r0, r0
        if( f->tail == f->size)
 80021c6:	4284      	cmp	r4, r0
        f->tail++;
 80021c8:	80d8      	strh	r0, [r3, #6]
        if( f->tail == f->size)
 80021ca:	d1ec      	bne.n	80021a6 <USBH_HID_FifoRead+0x16>
          f->tail = 0U;
 80021cc:	80dd      	strh	r5, [r3, #6]
 80021ce:	e7ea      	b.n	80021a6 <USBH_HID_FifoRead+0x16>
        f->lock = 0U;
 80021d0:	2200      	movs	r2, #0
 80021d2:	729a      	strb	r2, [r3, #10]
        return i;
 80021d4:	e7e3      	b.n	800219e <USBH_HID_FifoRead+0xe>

080021d6 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 80021d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t i;
  uint8_t *p;
  p = (uint8_t*) buf;
  if(f->lock == 0U)
 80021d8:	7a87      	ldrb	r7, [r0, #10]
{
 80021da:	4603      	mov	r3, r0
  if(f->lock == 0U)
 80021dc:	b11f      	cbz	r7, 80021e6 <USBH_HID_FifoWrite+0x10>
          f->head = 0U;
        }
      }
    }
  }
  f->lock = 0U;
 80021de:	2100      	movs	r1, #0
 80021e0:	7299      	strb	r1, [r3, #10]
  return nbytes;
 80021e2:	4610      	mov	r0, r2
}
 80021e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f->lock = 1U;
 80021e6:	2401      	movs	r4, #1
 80021e8:	7284      	strb	r4, [r0, #10]
  p = (uint8_t*) buf;
 80021ea:	468c      	mov	ip, r1
 80021ec:	ebac 0001 	sub.w	r0, ip, r1
 80021f0:	b280      	uxth	r0, r0
    for(i = 0U; i < nbytes; i++)
 80021f2:	4282      	cmp	r2, r0
 80021f4:	d9f3      	bls.n	80021de <USBH_HID_FifoWrite+0x8>
      if( (f->head + 1U == f->tail) ||
 80021f6:	889c      	ldrh	r4, [r3, #4]
 80021f8:	88dd      	ldrh	r5, [r3, #6]
 80021fa:	1c66      	adds	r6, r4, #1
 80021fc:	42ae      	cmp	r6, r5
 80021fe:	d004      	beq.n	800220a <USBH_HID_FifoWrite+0x34>
         ( (f->head + 1U == f->size) && (f->tail == 0U)))
 8002200:	f8b3 e008 	ldrh.w	lr, [r3, #8]
      if( (f->head + 1U == f->tail) ||
 8002204:	4576      	cmp	r6, lr
 8002206:	d103      	bne.n	8002210 <USBH_HID_FifoWrite+0x3a>
         ( (f->head + 1U == f->size) && (f->tail == 0U)))
 8002208:	b915      	cbnz	r5, 8002210 <USBH_HID_FifoWrite+0x3a>
        f->lock = 0U;
 800220a:	2200      	movs	r2, #0
 800220c:	729a      	strb	r2, [r3, #10]
        return i;
 800220e:	e7e9      	b.n	80021e4 <USBH_HID_FifoWrite+0xe>
        f->buf[f->head] = *p++;
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8002216:	5505      	strb	r5, [r0, r4]
        f->head++;
 8002218:	8898      	ldrh	r0, [r3, #4]
        if( f->head == f->size)
 800221a:	891c      	ldrh	r4, [r3, #8]
        f->head++;
 800221c:	3001      	adds	r0, #1
 800221e:	b280      	uxth	r0, r0
        if( f->head == f->size)
 8002220:	4284      	cmp	r4, r0
        f->head++;
 8002222:	8098      	strh	r0, [r3, #4]
          f->head = 0U;
 8002224:	bf08      	it	eq
 8002226:	809f      	strheq	r7, [r3, #4]
 8002228:	e7e0      	b.n	80021ec <USBH_HID_FifoWrite+0x16>

0800222a <USBH_HID_EventCallback>:
* @retval None
*/
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{

}
 800222a:	4770      	bx	lr

0800222c <USBH_HID_Process>:
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800222c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8002230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8002232:	69dc      	ldr	r4, [r3, #28]
  switch (HID_Handle->state)
 8002234:	78a3      	ldrb	r3, [r4, #2]
{
 8002236:	4606      	mov	r6, r0
  switch (HID_Handle->state)
 8002238:	2b06      	cmp	r3, #6
 800223a:	d81f      	bhi.n	800227c <USBH_HID_Process+0x50>
 800223c:	e8df f003 	tbb	[pc, r3]
 8002240:	1e1e0904 	.word	0x1e1e0904
 8002244:	2a30      	.short	0x2a30
 8002246:	3e          	.byte	0x3e
 8002247:	00          	.byte	0x00
    HID_Handle->Init(phost);
 8002248:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800224a:	4798      	blx	r3
    HID_Handle->state = HID_IDLE;
 800224c:	2301      	movs	r3, #1
      HID_Handle->state = HID_GET_DATA;
 800224e:	70a3      	strb	r3, [r4, #2]
 8002250:	e014      	b.n	800227c <USBH_HID_Process+0x50>
    status = USBH_HID_GetReport (phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8002252:	7e23      	ldrb	r3, [r4, #24]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	6963      	ldr	r3, [r4, #20]
 8002258:	2200      	movs	r2, #0
 800225a:	2101      	movs	r1, #1
 800225c:	f7ff ff0e 	bl	800207c <USBH_HID_GetReport>
    if (status == USBH_OK)
 8002260:	4605      	mov	r5, r0
 8002262:	b940      	cbnz	r0, 8002276 <USBH_HID_Process+0x4a>
      USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8002264:	8b22      	ldrh	r2, [r4, #24]
 8002266:	6961      	ldr	r1, [r4, #20]
 8002268:	f104 0008 	add.w	r0, r4, #8
 800226c:	f7ff ffb3 	bl	80021d6 <USBH_HID_FifoWrite>
      HID_Handle->state = HID_SYNC;
 8002270:	2305      	movs	r3, #5
          HID_Handle->state = HID_GET_DATA;
 8002272:	70a3      	strb	r3, [r4, #2]
 8002274:	e00b      	b.n	800228e <USBH_HID_Process+0x62>
    else if (status == USBH_BUSY)
 8002276:	2801      	cmp	r0, #1
 8002278:	d102      	bne.n	8002280 <USBH_HID_Process+0x54>
      HID_Handle->state = HID_IDLE;
 800227a:	70a0      	strb	r0, [r4, #2]
  USBH_StatusTypeDef status = USBH_OK;
 800227c:	2500      	movs	r5, #0
 800227e:	e006      	b.n	800228e <USBH_HID_Process+0x62>
    else if (status == USBH_NOT_SUPPORTED)
 8002280:	2803      	cmp	r0, #3
 8002282:	d101      	bne.n	8002288 <USBH_HID_Process+0x5c>
      HID_Handle->state = HID_SYNC;
 8002284:	2305      	movs	r3, #5
 8002286:	e7e2      	b.n	800224e <USBH_HID_Process+0x22>
      HID_Handle->state = HID_ERROR;
 8002288:	2307      	movs	r3, #7
 800228a:	70a3      	strb	r3, [r4, #2]
      status = USBH_FAIL;
 800228c:	2502      	movs	r5, #2
}
 800228e:	4628      	mov	r0, r5
 8002290:	b003      	add	sp, #12
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(phost->Timer & 1U)
 8002294:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
 8002298:	07db      	lsls	r3, r3, #31
 800229a:	d5ef      	bpl.n	800227c <USBH_HID_Process+0x50>
      HID_Handle->state = HID_GET_DATA;
 800229c:	2304      	movs	r3, #4
 800229e:	e7d6      	b.n	800224e <USBH_HID_Process+0x22>
    USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80022a0:	7863      	ldrb	r3, [r4, #1]
 80022a2:	7e22      	ldrb	r2, [r4, #24]
 80022a4:	6961      	ldr	r1, [r4, #20]
 80022a6:	f000 fd6f 	bl	8002d88 <USBH_InterruptReceiveData>
    HID_Handle->state = HID_POLL;
 80022aa:	2306      	movs	r3, #6
 80022ac:	70a3      	strb	r3, [r4, #2]
    HID_Handle->DataReady = 0U;
 80022ae:	2500      	movs	r5, #0
    HID_Handle->timer = phost->Timer;
 80022b0:	f8d6 33bc 	ldr.w	r3, [r6, #956]	; 0x3bc
 80022b4:	6223      	str	r3, [r4, #32]
    HID_Handle->DataReady = 0U;
 80022b6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    break;
 80022ba:	e7e8      	b.n	800228e <USBH_HID_Process+0x62>
    if(USBH_LL_GetURBState(phost , HID_Handle->InPipe) == USBH_URB_DONE)
 80022bc:	7861      	ldrb	r1, [r4, #1]
 80022be:	f001 f8b9 	bl	8003434 <USBH_LL_GetURBState>
 80022c2:	2801      	cmp	r0, #1
 80022c4:	4607      	mov	r7, r0
 80022c6:	d10f      	bne.n	80022e8 <USBH_HID_Process+0xbc>
      if(HID_Handle->DataReady == 0U)
 80022c8:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 80022cc:	2d00      	cmp	r5, #0
 80022ce:	d1d5      	bne.n	800227c <USBH_HID_Process+0x50>
        USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 80022d0:	8b22      	ldrh	r2, [r4, #24]
 80022d2:	6961      	ldr	r1, [r4, #20]
 80022d4:	f104 0008 	add.w	r0, r4, #8
 80022d8:	f7ff ff7d 	bl	80021d6 <USBH_HID_FifoWrite>
        HID_Handle->DataReady = 1U;
 80022dc:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
        USBH_HID_EventCallback(phost);
 80022e0:	4630      	mov	r0, r6
 80022e2:	f7ff ffa2 	bl	800222a <USBH_HID_EventCallback>
 80022e6:	e7d2      	b.n	800228e <USBH_HID_Process+0x62>
      if(USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 80022e8:	7861      	ldrb	r1, [r4, #1]
 80022ea:	4630      	mov	r0, r6
 80022ec:	f001 f8a2 	bl	8003434 <USBH_LL_GetURBState>
 80022f0:	2805      	cmp	r0, #5
 80022f2:	d1c3      	bne.n	800227c <USBH_HID_Process+0x50>
        if(USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 80022f4:	7ea1      	ldrb	r1, [r4, #26]
 80022f6:	4630      	mov	r0, r6
 80022f8:	f000 fd01 	bl	8002cfe <USBH_ClrFeature>
 80022fc:	4605      	mov	r5, r0
 80022fe:	2800      	cmp	r0, #0
 8002300:	d1bc      	bne.n	800227c <USBH_HID_Process+0x50>
          HID_Handle->state = HID_GET_DATA;
 8002302:	2304      	movs	r3, #4
 8002304:	e7b5      	b.n	8002272 <USBH_HID_Process+0x46>
	...

08002308 <USBH_HID_KeybdInit>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
  uint32_t x;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8002308:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378

  keybd_info.lctrl=keybd_info.lshift = 0U;
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <USBH_HID_KeybdInit+0x44>)
{
 800230e:	b510      	push	{r4, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8002310:	69dc      	ldr	r4, [r3, #28]
  keybd_info.lctrl=keybd_info.lshift = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	7093      	strb	r3, [r2, #2]
 8002316:	7053      	strb	r3, [r2, #1]
  keybd_info.lalt=keybd_info.lgui = 0U;
 8002318:	7113      	strb	r3, [r2, #4]
 800231a:	70d3      	strb	r3, [r2, #3]
  keybd_info.rctrl=keybd_info.rshift = 0U;
 800231c:	7193      	strb	r3, [r2, #6]
 800231e:	7153      	strb	r3, [r2, #5]
  keybd_info.ralt=keybd_info.rgui = 0U;
 8002320:	71d3      	strb	r3, [r2, #7]
 8002322:	7213      	strb	r3, [r2, #8]


  for(x = 0U; x < (sizeof(keybd_report_data)/sizeof(uint32_t)); x++)
  {
    keybd_report_data[x] = 0U;
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <USBH_HID_KeybdInit+0x48>)

  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
  {
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
  }
  HID_Handle->pData = (uint8_t*)(void *)keybd_report_data;
 8002326:	6162      	str	r2, [r4, #20]
    keybd_report_data[x] = 0U;
 8002328:	e9c2 3300 	strd	r3, r3, [r2]
  if(HID_Handle->length > (sizeof(keybd_report_data)/sizeof(uint32_t)))
 800232c:	8b23      	ldrh	r3, [r4, #24]
 800232e:	2b02      	cmp	r3, #2
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 8002330:	bf88      	it	hi
 8002332:	2302      	movhi	r3, #2
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8002334:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    HID_Handle->length = (sizeof(keybd_report_data)/sizeof(uint32_t));
 8002338:	bf88      	it	hi
 800233a:	8323      	strhhi	r3, [r4, #24]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 800233c:	f104 0008 	add.w	r0, r4, #8
 8002340:	2250      	movs	r2, #80	; 0x50
 8002342:	f7ff ff1f 	bl	8002184 <USBH_HID_FifoInit>

  return USBH_OK;
}
 8002346:	2000      	movs	r0, #0
 8002348:	bd10      	pop	{r4, pc}
 800234a:	bf00      	nop
 800234c:	200000cc 	.word	0x200000cc
 8002350:	200000c4 	.word	0x200000c4

08002354 <USBH_HID_GetKeybdInfo>:
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
  uint8_t x;

  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8002354:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8002358:	b570      	push	{r4, r5, r6, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800235a:	69dc      	ldr	r4, [r3, #28]
  if(HID_Handle->length == 0U)
 800235c:	8b22      	ldrh	r2, [r4, #24]
 800235e:	2a00      	cmp	r2, #0
 8002360:	d03d      	beq.n	80023de <USBH_HID_GetKeybdInfo+0x8a>
  {
    return USBH_FAIL;
  }
  /*Fill report */
  if(USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8002362:	4920      	ldr	r1, [pc, #128]	; (80023e4 <USBH_HID_GetKeybdInfo+0x90>)
 8002364:	f104 0008 	add.w	r0, r4, #8
 8002368:	f7ff ff12 	bl	8002190 <USBH_HID_FifoRead>
 800236c:	8b23      	ldrh	r3, [r4, #24]
 800236e:	4283      	cmp	r3, r0
 8002370:	d135      	bne.n	80023de <USBH_HID_GetKeybdInfo+0x8a>
  {

    keybd_info.lctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8002372:	2100      	movs	r1, #0
 8002374:	481c      	ldr	r0, [pc, #112]	; (80023e8 <USBH_HID_GetKeybdInfo+0x94>)
 8002376:	4c1d      	ldr	r4, [pc, #116]	; (80023ec <USBH_HID_GetKeybdInfo+0x98>)
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
    keybd_info.rgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);

    for(x = 0U; x < sizeof(keybd_info.keys); x++)
    {
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8002378:	4e1d      	ldr	r6, [pc, #116]	; (80023f0 <USBH_HID_GetKeybdInfo+0x9c>)
    keybd_info.lctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800237a:	f000 f87f 	bl	800247c <HID_ReadItem>
    keybd_info.lshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800237e:	2100      	movs	r1, #0
    keybd_info.lctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8002380:	7060      	strb	r0, [r4, #1]
    keybd_info.lshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8002382:	481c      	ldr	r0, [pc, #112]	; (80023f4 <USBH_HID_GetKeybdInfo+0xa0>)
 8002384:	f000 f87a 	bl	800247c <HID_ReadItem>
    keybd_info.lalt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8002388:	2100      	movs	r1, #0
    keybd_info.lshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800238a:	70a0      	strb	r0, [r4, #2]
    keybd_info.lalt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800238c:	481a      	ldr	r0, [pc, #104]	; (80023f8 <USBH_HID_GetKeybdInfo+0xa4>)
 800238e:	f000 f875 	bl	800247c <HID_ReadItem>
    keybd_info.lgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8002392:	2100      	movs	r1, #0
    keybd_info.lalt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8002394:	70e0      	strb	r0, [r4, #3]
    keybd_info.lgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8002396:	4819      	ldr	r0, [pc, #100]	; (80023fc <USBH_HID_GetKeybdInfo+0xa8>)
 8002398:	f000 f870 	bl	800247c <HID_ReadItem>
    keybd_info.rctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800239c:	2100      	movs	r1, #0
    keybd_info.lgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800239e:	7120      	strb	r0, [r4, #4]
    keybd_info.rctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 80023a0:	4817      	ldr	r0, [pc, #92]	; (8002400 <USBH_HID_GetKeybdInfo+0xac>)
 80023a2:	f000 f86b 	bl	800247c <HID_ReadItem>
    keybd_info.rshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 80023a6:	2100      	movs	r1, #0
    keybd_info.rctrl=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 80023a8:	7160      	strb	r0, [r4, #5]
    keybd_info.rshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 80023aa:	4816      	ldr	r0, [pc, #88]	; (8002404 <USBH_HID_GetKeybdInfo+0xb0>)
 80023ac:	f000 f866 	bl	800247c <HID_ReadItem>
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 80023b0:	2100      	movs	r1, #0
    keybd_info.rshift=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 80023b2:	71a0      	strb	r0, [r4, #6]
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 80023b4:	4814      	ldr	r0, [pc, #80]	; (8002408 <USBH_HID_GetKeybdInfo+0xb4>)
 80023b6:	f000 f861 	bl	800247c <HID_ReadItem>
    keybd_info.rgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 80023ba:	2100      	movs	r1, #0
    keybd_info.ralt=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 80023bc:	71e0      	strb	r0, [r4, #7]
    keybd_info.rgui=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 80023be:	4813      	ldr	r0, [pc, #76]	; (800240c <USBH_HID_GetKeybdInfo+0xb8>)
 80023c0:	f000 f85c 	bl	800247c <HID_ReadItem>
 80023c4:	2500      	movs	r5, #0
 80023c6:	7220      	strb	r0, [r4, #8]
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 80023c8:	b2e9      	uxtb	r1, r5
 80023ca:	4630      	mov	r0, r6
 80023cc:	f000 f856 	bl	800247c <HID_ReadItem>
 80023d0:	1963      	adds	r3, r4, r5
 80023d2:	3501      	adds	r5, #1
    for(x = 0U; x < sizeof(keybd_info.keys); x++)
 80023d4:	2d06      	cmp	r5, #6
      keybd_info.keys[x]=(uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 80023d6:	7258      	strb	r0, [r3, #9]
    for(x = 0U; x < sizeof(keybd_info.keys); x++)
 80023d8:	d1f6      	bne.n	80023c8 <USBH_HID_GetKeybdInfo+0x74>
  return &keybd_info;
 80023da:	4804      	ldr	r0, [pc, #16]	; (80023ec <USBH_HID_GetKeybdInfo+0x98>)
}
 80023dc:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 80023de:	2000      	movs	r0, #0
 80023e0:	e7fc      	b.n	80023dc <USBH_HID_GetKeybdInfo+0x88>
 80023e2:	bf00      	nop
 80023e4:	200000c4 	.word	0x200000c4
 80023e8:	08003920 	.word	0x08003920
 80023ec:	200000cc 	.word	0x200000cc
 80023f0:	080038e0 	.word	0x080038e0
 80023f4:	08003960 	.word	0x08003960
 80023f8:	08003900 	.word	0x08003900
 80023fc:	08003940 	.word	0x08003940
 8002400:	080039a0 	.word	0x080039a0
 8002404:	080039e0 	.word	0x080039e0
 8002408:	08003980 	.word	0x08003980
 800240c:	080039c0 	.word	0x080039c0

08002410 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 8002410:	4a06      	ldr	r2, [pc, #24]	; (800242c <USBH_HID_GetASCIICode+0x1c>)
 8002412:	7a43      	ldrb	r3, [r0, #9]
 8002414:	5cd3      	ldrb	r3, [r2, r3]
  uint8_t   output;
  if((info->lshift == 1U) || (info->rshift))
 8002416:	7882      	ldrb	r2, [r0, #2]
 8002418:	2a01      	cmp	r2, #1
 800241a:	d001      	beq.n	8002420 <USBH_HID_GetASCIICode+0x10>
 800241c:	7982      	ldrb	r2, [r0, #6]
 800241e:	b112      	cbz	r2, 8002426 <USBH_HID_GetASCIICode+0x16>
  {
  output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 8002420:	4a03      	ldr	r2, [pc, #12]	; (8002430 <USBH_HID_GetASCIICode+0x20>)
  }
  else
  {
  output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 8002422:	5cd0      	ldrb	r0, [r2, r3]
  }
  return output;
}
 8002424:	4770      	bx	lr
  output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 8002426:	4a03      	ldr	r2, [pc, #12]	; (8002434 <USBH_HID_GetASCIICode+0x24>)
 8002428:	e7fb      	b.n	8002422 <USBH_HID_GetASCIICode+0x12>
 800242a:	bf00      	nop
 800242c:	080036f4 	.word	0x080036f4
 8002430:	0800385e 	.word	0x0800385e
 8002434:	080037dc 	.word	0x080037dc

08002438 <USBH_HID_MouseInit>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8002438:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378

  mouse_info.x = 0U;
 800243c:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <USBH_HID_MouseInit+0x3c>)
{
 800243e:	b510      	push	{r4, lr}
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8002440:	69dc      	ldr	r4, [r3, #28]
  mouse_info.x = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	7013      	strb	r3, [r2, #0]
  mouse_info.y = 0U;
 8002446:	7053      	strb	r3, [r2, #1]
  mouse_info.buttons[0] = 0U;
 8002448:	7093      	strb	r3, [r2, #2]
  mouse_info.buttons[1] = 0U;
 800244a:	70d3      	strb	r3, [r2, #3]
  mouse_info.buttons[2] = 0U;
 800244c:	7113      	strb	r3, [r2, #4]

  mouse_report_data[0] = 0U;
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <USBH_HID_MouseInit+0x40>)

  if(HID_Handle->length > sizeof(mouse_report_data))
  {
    HID_Handle->length = sizeof(mouse_report_data);
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_report_data;
 8002450:	6162      	str	r2, [r4, #20]
  mouse_report_data[0] = 0U;
 8002452:	6013      	str	r3, [r2, #0]
  if(HID_Handle->length > sizeof(mouse_report_data))
 8002454:	8b23      	ldrh	r3, [r4, #24]
 8002456:	2b04      	cmp	r3, #4
    HID_Handle->length = sizeof(mouse_report_data);
 8002458:	bf88      	it	hi
 800245a:	2304      	movhi	r3, #4
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 800245c:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    HID_Handle->length = sizeof(mouse_report_data);
 8002460:	bf88      	it	hi
 8002462:	8323      	strhhi	r3, [r4, #24]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8002464:	f104 0008 	add.w	r0, r4, #8
 8002468:	2228      	movs	r2, #40	; 0x28
 800246a:	f7ff fe8b 	bl	8002184 <USBH_HID_FifoInit>

  return USBH_OK;
}
 800246e:	2000      	movs	r0, #0
 8002470:	bd10      	pop	{r4, pc}
 8002472:	bf00      	nop
 8002474:	200000dc 	.word	0x200000dc
 8002478:	200000e4 	.word	0x200000e4

0800247c <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800247c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t shift=ri->shift;

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 800247e:	7a43      	ldrb	r3, [r0, #9]
  uint8_t *data=ri->data;
 8002480:	6806      	ldr	r6, [r0, #0]
  uint8_t shift=ri->shift;
 8002482:	7a02      	ldrb	r2, [r0, #8]
  if (ri->count > 0U)
 8002484:	b143      	cbz	r3, 8002498 <HID_ReadItem+0x1c>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8002486:	428b      	cmp	r3, r1
 8002488:	d932      	bls.n	80024f0 <HID_ReadItem+0x74>
    {
      return(0U);
    }

    /* calculate bit offset */
    bofs = ndx*ri->size;
 800248a:	6843      	ldr	r3, [r0, #4]
    bofs += shift;
 800248c:	fb03 2301 	mla	r3, r3, r1, r2
    /* calculate byte offset + shift pair from bit offset. */
    data+=bofs / 8U;
 8002490:	eb06 06d3 	add.w	r6, r6, r3, lsr #3
    shift=(uint8_t)(bofs % 8U);
 8002494:	f003 0207 	and.w	r2, r3, #7
  }
  /* read data bytes in little endian order */
  for(x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8002498:	6841      	ldr	r1, [r0, #4]
 800249a:	2400      	movs	r4, #0
 800249c:	08cb      	lsrs	r3, r1, #3
 800249e:	f011 0f07 	tst.w	r1, #7
 80024a2:	f103 0501 	add.w	r5, r3, #1
 80024a6:	bf08      	it	eq
 80024a8:	461d      	moveq	r5, r3
  uint32_t val = 0U;
 80024aa:	4623      	mov	r3, r4
  for(x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80024ac:	42ac      	cmp	r4, r5
 80024ae:	d11a      	bne.n	80024e6 <HID_ReadItem+0x6a>
  {
    val=(uint32_t)((uint32_t)(*data) << (x * 8U));
  }
  val=(val >> shift) & ((1U << ri->size) - 1U);
 80024b0:	40d3      	lsrs	r3, r2
 80024b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024b6:	408a      	lsls	r2, r1
 80024b8:	ea23 0302 	bic.w	r3, r3, r2

  if (val < ri->logical_min || val > ri->logical_max)
 80024bc:	68c2      	ldr	r2, [r0, #12]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d816      	bhi.n	80024f0 <HID_ReadItem+0x74>
 80024c2:	6902      	ldr	r2, [r0, #16]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d313      	bcc.n	80024f0 <HID_ReadItem+0x74>
 80024c8:	69c2      	ldr	r2, [r0, #28]
    return(0U);
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 80024ca:	7a80      	ldrb	r0, [r0, #10]
 80024cc:	b140      	cbz	r0, 80024e0 <HID_ReadItem+0x64>
 80024ce:	2001      	movs	r0, #1
 80024d0:	1e4c      	subs	r4, r1, #1
 80024d2:	fa00 f404 	lsl.w	r4, r0, r4
 80024d6:	421c      	tst	r4, r3
  val=(val >> shift) & ((1U << ri->size) - 1U);
 80024d8:	bf1e      	ittt	ne
 80024da:	4088      	lslne	r0, r1
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs=(uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 80024dc:	4240      	negne	r0, r0
 80024de:	4303      	orrne	r3, r0
  {
    if(ri->resolution == 1U)
    {
      return(val);
    }
    return(val*ri->resolution);
 80024e0:	fb02 f003 	mul.w	r0, r2, r3
  }
}
 80024e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    val=(uint32_t)((uint32_t)(*data) << (x * 8U));
 80024e6:	7833      	ldrb	r3, [r6, #0]
 80024e8:	00e7      	lsls	r7, r4, #3
 80024ea:	40bb      	lsls	r3, r7
  for(x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80024ec:	3401      	adds	r4, #1
 80024ee:	e7dd      	b.n	80024ac <HID_ReadItem+0x30>
      return(0U);
 80024f0:	2000      	movs	r0, #0
 80024f2:	e7f7      	b.n	80024e4 <HID_ReadItem+0x68>

080024f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80024f4:	f500 7360 	add.w	r3, r0, #896	; 0x380
 80024f8:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 80024fc:	2100      	movs	r1, #0
 80024fe:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8002502:	4293      	cmp	r3, r2
 8002504:	d1fb      	bne.n	80024fe <DeInitStateMachine+0xa>
 8002506:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800250a:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8002514:	4291      	cmp	r1, r2
 8002516:	d1fb      	bne.n	8002510 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8002518:	2201      	movs	r2, #1
  phost->gState = HOST_IDLE;
 800251a:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800251c:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 800251e:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8002520:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8002524:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
  phost->Control.errorcount = 0U;
 8002526:	7643      	strb	r3, [r0, #25]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8002528:	2240      	movs	r2, #64	; 0x40

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800252a:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800252e:	7182      	strb	r2, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8002530:	f8a0 331c 	strh.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;

  return USBH_OK;
}
 8002534:	2000      	movs	r0, #0
 8002536:	4770      	bx	lr

08002538 <USBH_Init>:
{
 8002538:	b538      	push	{r3, r4, r5, lr}
 800253a:	460d      	mov	r5, r1
  if(phost == NULL)
 800253c:	4604      	mov	r4, r0
 800253e:	b180      	cbz	r0, 8002562 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8002540:	2300      	movs	r3, #0
  phost->id = id;
 8002542:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8002546:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 800254a:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 800254e:	f7ff ffd1 	bl	80024f4 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8002552:	b10d      	cbz	r5, 8002558 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8002554:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8002558:	4620      	mov	r0, r4
 800255a:	f000 fecd 	bl	80032f8 <USBH_LL_Init>
  return USBH_OK;
 800255e:	2000      	movs	r0, #0
}
 8002560:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8002562:	2002      	movs	r0, #2
 8002564:	e7fc      	b.n	8002560 <USBH_Init+0x28>

08002566 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8002566:	b149      	cbz	r1, 800257c <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8002568:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800256c:	b933      	cbnz	r3, 800257c <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800256e:	2201      	movs	r2, #1
 8002570:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 8002574:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 8002578:	4618      	mov	r0, r3
 800257a:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800257c:	2002      	movs	r0, #2
  }

  return status;
}
 800257e:	4770      	bx	lr

08002580 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8002580:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8002584:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8002586:	bf86      	itte	hi
 8002588:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 800258c:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800258e:	2002      	movls	r0, #2
  }
  return status;
}
 8002590:	4770      	bx	lr

08002592 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8002592:	b570      	push	{r4, r5, r6, lr}
 8002594:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8002596:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 800259a:	428e      	cmp	r6, r1
 800259c:	b2e5      	uxtb	r5, r4
 800259e:	d001      	beq.n	80025a4 <USBH_FindInterface+0x12>
 80025a0:	29ff      	cmp	r1, #255	; 0xff
 80025a2:	d10b      	bne.n	80025bc <USBH_FindInterface+0x2a>
 80025a4:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 80025a8:	4296      	cmp	r6, r2
 80025aa:	d001      	beq.n	80025b0 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80025ac:	2aff      	cmp	r2, #255	; 0xff
 80025ae:	d105      	bne.n	80025bc <USBH_FindInterface+0x2a>
 80025b0:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 80025b4:	429e      	cmp	r6, r3
 80025b6:	d004      	beq.n	80025c2 <USBH_FindInterface+0x30>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80025b8:	2bff      	cmp	r3, #255	; 0xff
 80025ba:	d002      	beq.n	80025c2 <USBH_FindInterface+0x30>
 80025bc:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80025be:	b114      	cbz	r4, 80025c6 <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 80025c0:	25ff      	movs	r5, #255	; 0xff
}
 80025c2:	4628      	mov	r0, r5
 80025c4:	bd70      	pop	{r4, r5, r6, pc}
 80025c6:	2401      	movs	r4, #1
 80025c8:	e7e5      	b.n	8002596 <USBH_FindInterface+0x4>

080025ca <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80025ca:	b510      	push	{r4, lr}
 80025cc:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80025ce:	f000 feb9 	bl	8003344 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80025d2:	2101      	movs	r1, #1
 80025d4:	4620      	mov	r0, r4
 80025d6:	f000 ff31 	bl	800343c <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 80025da:	2000      	movs	r0, #0
 80025dc:	bd10      	pop	{r4, pc}

080025de <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80025de:	b530      	push	{r4, r5, lr}
 80025e0:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80025e2:	2302      	movs	r3, #2
 80025e4:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 80025e8:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 80025ec:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80025ee:	b933      	cbnz	r3, 80025fe <USBH_Process+0x20>
 80025f0:	7802      	ldrb	r2, [r0, #0]
 80025f2:	b122      	cbz	r2, 80025fe <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80025f4:	7802      	ldrb	r2, [r0, #0]
 80025f6:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 80025f8:	bf1c      	itt	ne
 80025fa:	2203      	movne	r2, #3
 80025fc:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 80025fe:	7822      	ldrb	r2, [r4, #0]
 8002600:	2a0b      	cmp	r2, #11
 8002602:	d818      	bhi.n	8002636 <USBH_Process+0x58>
 8002604:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002608:	001a000c 	.word	0x001a000c
 800260c:	0122001f 	.word	0x0122001f
 8002610:	004f0017 	.word	0x004f0017
 8002614:	00c80108 	.word	0x00c80108
 8002618:	00db00d1 	.word	0x00db00d1
 800261c:	011900e8 	.word	0x011900e8
    if (phost->device.is_connected)
 8002620:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8002624:	b13b      	cbz	r3, 8002636 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8002626:	2301      	movs	r3, #1
      USBH_Delay(200U);
 8002628:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800262a:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 800262c:	f000 ff22 	bl	8003474 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8002630:	4620      	mov	r0, r4
 8002632:	f000 feb1 	bl	8003398 <USBH_LL_ResetPort>
}
 8002636:	2000      	movs	r0, #0
 8002638:	b007      	add	sp, #28
 800263a:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 800263c:	2b01      	cmp	r3, #1
 800263e:	d1fa      	bne.n	8002636 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 8002640:	2302      	movs	r3, #2
        phost->gState  = HOST_INPUT;
 8002642:	7023      	strb	r3, [r4, #0]
 8002644:	e7f7      	b.n	8002636 <USBH_Process+0x58>
    USBH_Delay(100U);
 8002646:	2064      	movs	r0, #100	; 0x64
 8002648:	f000 ff14 	bl	8003474 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800264c:	4620      	mov	r0, r4
 800264e:	f000 fe95 	bl	800337c <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8002652:	2305      	movs	r3, #5
 8002654:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8002656:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800265a:	2100      	movs	r1, #0
 800265c:	4620      	mov	r0, r4
 800265e:	f000 fbb7 	bl	8002dd0 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8002662:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8002664:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8002666:	4620      	mov	r0, r4
 8002668:	f000 fbb2 	bl	8002dd0 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 800266c:	79a2      	ldrb	r2, [r4, #6]
 800266e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8002672:	7120      	strb	r0, [r4, #4]
 8002674:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8002676:	9202      	str	r2, [sp, #8]
 8002678:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 800267a:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800267e:	9200      	str	r2, [sp, #0]
 8002680:	9501      	str	r5, [sp, #4]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	4620      	mov	r0, r4
 8002686:	f000 fb8f 	bl	8002da8 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 800268a:	79a2      	ldrb	r2, [r4, #6]
 800268c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8002690:	7961      	ldrb	r1, [r4, #5]
 8002692:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8002696:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800269a:	9200      	str	r2, [sp, #0]
 800269c:	4620      	mov	r0, r4
 800269e:	462a      	mov	r2, r5
 80026a0:	f000 fb82 	bl	8002da8 <USBH_OpenPipe>
 80026a4:	e7c7      	b.n	8002636 <USBH_Process+0x58>
  switch (phost->EnumState)
 80026a6:	7863      	ldrb	r3, [r4, #1]
 80026a8:	2b07      	cmp	r3, #7
 80026aa:	d8c4      	bhi.n	8002636 <USBH_Process+0x58>
 80026ac:	e8df f003 	tbb	[pc, r3]
 80026b0:	301e1504 	.word	0x301e1504
 80026b4:	5d4f4138 	.word	0x5d4f4138
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80026b8:	2108      	movs	r1, #8
 80026ba:	4620      	mov	r0, r4
 80026bc:	f000 f9fc 	bl	8002ab8 <USBH_Get_DevDesc>
 80026c0:	4605      	mov	r5, r0
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d1b7      	bne.n	8002636 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80026c6:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80026c8:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80026cc:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 80026ce:	7921      	ldrb	r1, [r4, #4]
 80026d0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80026d4:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 80026d6:	9202      	str	r2, [sp, #8]
 80026d8:	e7cf      	b.n	800267a <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80026da:	2112      	movs	r1, #18
 80026dc:	4620      	mov	r0, r4
 80026de:	f000 f9eb 	bl	8002ab8 <USBH_Get_DevDesc>
 80026e2:	2800      	cmp	r0, #0
 80026e4:	d1a7      	bne.n	8002636 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 80026e6:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80026e8:	7063      	strb	r3, [r4, #1]
 80026ea:	e7a4      	b.n	8002636 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80026ec:	2101      	movs	r1, #1
 80026ee:	4620      	mov	r0, r4
 80026f0:	f000 fade 	bl	8002cb0 <USBH_SetAddress>
 80026f4:	4605      	mov	r5, r0
 80026f6:	2800      	cmp	r0, #0
 80026f8:	d19d      	bne.n	8002636 <USBH_Process+0x58>
      USBH_Delay(2U);
 80026fa:	2002      	movs	r0, #2
 80026fc:	f000 feba 	bl	8003474 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8002700:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8002702:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8002704:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8002706:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 800270a:	7921      	ldrb	r1, [r4, #4]
 800270c:	79a2      	ldrb	r2, [r4, #6]
 800270e:	e7e2      	b.n	80026d6 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 8002710:	2109      	movs	r1, #9
 8002712:	4620      	mov	r0, r4
 8002714:	f000 fa18 	bl	8002b48 <USBH_Get_CfgDesc>
 8002718:	2800      	cmp	r0, #0
 800271a:	d18c      	bne.n	8002636 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800271c:	2304      	movs	r3, #4
 800271e:	e7e3      	b.n	80026e8 <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 8002720:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 8002724:	4620      	mov	r0, r4
 8002726:	f000 fa0f 	bl	8002b48 <USBH_Get_CfgDesc>
 800272a:	2800      	cmp	r0, #0
 800272c:	d183      	bne.n	8002636 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800272e:	2305      	movs	r3, #5
 8002730:	e7da      	b.n	80026e8 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8002732:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8002736:	b141      	cbz	r1, 800274a <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 8002738:	23ff      	movs	r3, #255	; 0xff
 800273a:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800273e:	4620      	mov	r0, r4
 8002740:	f000 fa8f 	bl	8002c62 <USBH_Get_StringDesc>
 8002744:	2800      	cmp	r0, #0
 8002746:	f47f af76 	bne.w	8002636 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800274a:	2306      	movs	r3, #6
 800274c:	e7cc      	b.n	80026e8 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 800274e:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 8002752:	b141      	cbz	r1, 8002766 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 8002754:	23ff      	movs	r3, #255	; 0xff
 8002756:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800275a:	4620      	mov	r0, r4
 800275c:	f000 fa81 	bl	8002c62 <USBH_Get_StringDesc>
 8002760:	2800      	cmp	r0, #0
 8002762:	f47f af68 	bne.w	8002636 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8002766:	2307      	movs	r3, #7
 8002768:	e7be      	b.n	80026e8 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800276a:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 800276e:	b941      	cbnz	r1, 8002782 <USBH_Process+0x1a4>
      phost->device.current_interface = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8002776:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10a      	bne.n	8002794 <USBH_Process+0x1b6>
        phost->gState = HOST_SET_CONFIGURATION;
 800277e:	2308      	movs	r3, #8
 8002780:	e75f      	b.n	8002642 <USBH_Process+0x64>
      if ( USBH_Get_StringDesc(phost,
 8002782:	23ff      	movs	r3, #255	; 0xff
 8002784:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8002788:	4620      	mov	r0, r4
 800278a:	f000 fa6a 	bl	8002c62 <USBH_Get_StringDesc>
 800278e:	2800      	cmp	r0, #0
 8002790:	d0ee      	beq.n	8002770 <USBH_Process+0x192>
 8002792:	e750      	b.n	8002636 <USBH_Process+0x58>
        phost->gState  = HOST_INPUT;
 8002794:	2307      	movs	r3, #7
 8002796:	e754      	b.n	8002642 <USBH_Process+0x64>
      if(phost->pUser != NULL)
 8002798:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800279c:	2b00      	cmp	r3, #0
 800279e:	f43f af4a 	beq.w	8002636 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80027a2:	2101      	movs	r1, #1
 80027a4:	4620      	mov	r0, r4
 80027a6:	4798      	blx	r3
 80027a8:	e7e9      	b.n	800277e <USBH_Process+0x1a0>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80027aa:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80027ae:	4620      	mov	r0, r4
 80027b0:	f000 fa8b 	bl	8002cca <USBH_SetCfg>
 80027b4:	2800      	cmp	r0, #0
 80027b6:	f47f af3e 	bne.w	8002636 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80027ba:	2309      	movs	r3, #9
 80027bc:	e741      	b.n	8002642 <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80027be:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 80027c2:	069b      	lsls	r3, r3, #26
 80027c4:	d506      	bpl.n	80027d4 <USBH_Process+0x1f6>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80027c6:	2101      	movs	r1, #1
 80027c8:	4620      	mov	r0, r4
 80027ca:	f000 fa8b 	bl	8002ce4 <USBH_SetFeature>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	f47f af31 	bne.w	8002636 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 80027d4:	230a      	movs	r3, #10
 80027d6:	e734      	b.n	8002642 <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 80027d8:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f43f af2a 	beq.w	8002636 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80027e8:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 80027ec:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 80027f0:	7919      	ldrb	r1, [r3, #4]
 80027f2:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 80027f4:	bf08      	it	eq
 80027f6:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 80027fa:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80027fe:	b1d3      	cbz	r3, 8002836 <USBH_Process+0x258>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4620      	mov	r0, r4
 8002804:	4798      	blx	r3
 8002806:	b9b0      	cbnz	r0, 8002836 <USBH_Process+0x258>
          phost->gState  = HOST_CLASS_REQUEST;
 8002808:	2306      	movs	r3, #6
 800280a:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800280c:	2103      	movs	r1, #3
 800280e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8002812:	4620      	mov	r0, r4
 8002814:	4798      	blx	r3
 8002816:	e70e      	b.n	8002636 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 8002818:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800281c:	b15b      	cbz	r3, 8002836 <USBH_Process+0x258>
      status = phost->pActiveClass->Requests(phost);
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	4620      	mov	r0, r4
 8002822:	4798      	blx	r3
 8002824:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8002828:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f47f af02 	bne.w	8002636 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 8002832:	230b      	movs	r3, #11
 8002834:	e705      	b.n	8002642 <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 8002836:	230d      	movs	r3, #13
 8002838:	e703      	b.n	8002642 <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 800283a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800283e:	2b00      	cmp	r3, #0
 8002840:	f43f aef9 	beq.w	8002636 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	4620      	mov	r0, r4
 8002848:	4798      	blx	r3
 800284a:	e6f4      	b.n	8002636 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 800284c:	4620      	mov	r0, r4
 800284e:	f7ff fe51 	bl	80024f4 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8002852:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8002856:	2b00      	cmp	r3, #0
 8002858:	f43f aeed 	beq.w	8002636 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	4620      	mov	r0, r4
 8002860:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8002862:	2300      	movs	r3, #0
 8002864:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 8002868:	e6e5      	b.n	8002636 <USBH_Process+0x58>

0800286a <USBH_LL_SetTimer>:
  phost->Timer = time;
 800286a:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
}
 800286e:	4770      	bx	lr

08002870 <USBH_LL_IncTimer>:
  phost->Timer ++;
 8002870:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8002874:	3201      	adds	r2, #1
 8002876:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800287a:	7802      	ldrb	r2, [r0, #0]
 800287c:	2a0b      	cmp	r2, #11
 800287e:	d104      	bne.n	800288a <USBH_LL_IncTimer+0x1a>
 8002880:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8002884:	b10b      	cbz	r3, 800288a <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4718      	bx	r3
}
 800288a:	4770      	bx	lr

0800288c <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 800288c:	2301      	movs	r3, #1
 800288e:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 8002892:	4770      	bx	lr

08002894 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 800289a:	4770      	bx	lr

0800289c <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 800289c:	7802      	ldrb	r2, [r0, #0]
{
 800289e:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 80028a0:	b94a      	cbnz	r2, 80028b6 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 80028a2:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 80028a6:	2201      	movs	r2, #1
 80028a8:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 80028ac:	b10b      	cbz	r3, 80028b2 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80028ae:	2104      	movs	r1, #4
 80028b0:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80028b2:	2000      	movs	r0, #0
 80028b4:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 80028b6:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 80028ba:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 80028bc:	bf04      	itt	eq
 80028be:	2202      	moveq	r2, #2
 80028c0:	7002      	strbeq	r2, [r0, #0]
 80028c2:	e7f6      	b.n	80028b2 <USBH_LL_Connect+0x16>

080028c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80028c4:	b510      	push	{r4, lr}
 80028c6:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 80028c8:	f000 fd4a 	bl	8003360 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80028cc:	7921      	ldrb	r1, [r4, #4]
 80028ce:	4620      	mov	r0, r4
 80028d0:	f000 fa95 	bl	8002dfe <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80028d4:	7961      	ldrb	r1, [r4, #5]
 80028d6:	4620      	mov	r0, r4
 80028d8:	f000 fa91 	bl	8002dfe <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 80028e2:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80028e6:	b113      	cbz	r3, 80028ee <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80028e8:	2105      	movs	r1, #5
 80028ea:	4620      	mov	r0, r4
 80028ec:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80028ee:	4620      	mov	r0, r4
 80028f0:	f000 fd28 	bl	8003344 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80028f4:	2303      	movs	r3, #3
 80028f6:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80028f8:	2000      	movs	r0, #0
 80028fa:	bd10      	pop	{r4, pc}

080028fc <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80028fc:	b513      	push	{r0, r1, r4, lr}
 80028fe:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8002900:	7880      	ldrb	r0, [r0, #2]
 8002902:	2801      	cmp	r0, #1
 8002904:	d003      	beq.n	800290e <USBH_CtlReq+0x12>
 8002906:	2802      	cmp	r0, #2
 8002908:	d008      	beq.n	800291c <USBH_CtlReq+0x20>
    }
    else
    {
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
      {
        phost->Control.state = CTRL_ERROR;
 800290a:	2001      	movs	r0, #1
  return status;
 800290c:	e004      	b.n	8002918 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 800290e:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8002910:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8002912:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8002914:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8002916:	70a3      	strb	r3, [r4, #2]
}
 8002918:	b002      	add	sp, #8
 800291a:	bd10      	pop	{r4, pc}
  switch (phost->Control.state)
 800291c:	7e23      	ldrb	r3, [r4, #24]
 800291e:	3b01      	subs	r3, #1
 8002920:	2101      	movs	r1, #1
 8002922:	2b0a      	cmp	r3, #10
 8002924:	d8f1      	bhi.n	800290a <USBH_CtlReq+0xe>
 8002926:	e8df f003 	tbb	[pc, r3]
 800292a:	0f06      	.short	0x0f06
 800292c:	4d41372c 	.word	0x4d41372c
 8002930:	8d817065 	.word	0x8d817065
 8002934:	96          	.byte	0x96
 8002935:	00          	.byte	0x00
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8002936:	7962      	ldrb	r2, [r4, #5]
 8002938:	f104 0110 	add.w	r1, r4, #16
 800293c:	4620      	mov	r0, r4
 800293e:	f000 f9eb 	bl	8002d18 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8002942:	2302      	movs	r3, #2
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8002944:	7623      	strb	r3, [r4, #24]
 8002946:	e7e0      	b.n	800290a <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8002948:	7961      	ldrb	r1, [r4, #5]
 800294a:	4620      	mov	r0, r4
 800294c:	f000 fd72 	bl	8003434 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8002950:	2801      	cmp	r0, #1
 8002952:	d110      	bne.n	8002976 <USBH_CtlReq+0x7a>
      if (phost->Control.setup.b.wLength.w != 0U)
 8002954:	8ae2      	ldrh	r2, [r4, #22]
 8002956:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800295a:	b132      	cbz	r2, 800296a <USBH_CtlReq+0x6e>
        if (direction == USB_D2H)
 800295c:	2b00      	cmp	r3, #0
 800295e:	da02      	bge.n	8002966 <USBH_CtlReq+0x6a>
          phost->Control.state = CTRL_DATA_IN;
 8002960:	2303      	movs	r3, #3
 8002962:	7623      	strb	r3, [r4, #24]
 8002964:	e7d8      	b.n	8002918 <USBH_CtlReq+0x1c>
          phost->Control.state = CTRL_DATA_OUT;
 8002966:	2305      	movs	r3, #5
 8002968:	e7ec      	b.n	8002944 <USBH_CtlReq+0x48>
        if (direction == USB_D2H)
 800296a:	2b00      	cmp	r3, #0
 800296c:	da01      	bge.n	8002972 <USBH_CtlReq+0x76>
      phost->Control.state = CTRL_STATUS_OUT;
 800296e:	2309      	movs	r3, #9
 8002970:	e7e8      	b.n	8002944 <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 8002972:	2307      	movs	r3, #7
 8002974:	e7e6      	b.n	8002944 <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8002976:	2804      	cmp	r0, #4
 8002978:	d001      	beq.n	800297e <USBH_CtlReq+0x82>
 800297a:	2802      	cmp	r0, #2
 800297c:	d1c5      	bne.n	800290a <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 800297e:	230b      	movs	r3, #11
 8002980:	e7e0      	b.n	8002944 <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 8002982:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8002986:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8002988:	89a2      	ldrh	r2, [r4, #12]
 800298a:	7923      	ldrb	r3, [r4, #4]
 800298c:	68a1      	ldr	r1, [r4, #8]
 800298e:	4620      	mov	r0, r4
 8002990:	f000 f9ea 	bl	8002d68 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8002994:	2304      	movs	r3, #4
 8002996:	e7d5      	b.n	8002944 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8002998:	7921      	ldrb	r1, [r4, #4]
 800299a:	4620      	mov	r0, r4
 800299c:	f000 fd4a 	bl	8003434 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80029a0:	2801      	cmp	r0, #1
 80029a2:	d0e4      	beq.n	800296e <USBH_CtlReq+0x72>
    if  (URB_Status == USBH_URB_STALL)
 80029a4:	2805      	cmp	r0, #5
 80029a6:	d015      	beq.n	80029d4 <USBH_CtlReq+0xd8>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 80029a8:	2804      	cmp	r0, #4
 80029aa:	e7e7      	b.n	800297c <USBH_CtlReq+0x80>
    USBH_CtlSendData (phost,
 80029ac:	7963      	ldrb	r3, [r4, #5]
 80029ae:	9100      	str	r1, [sp, #0]
 80029b0:	89a2      	ldrh	r2, [r4, #12]
 80029b2:	68a1      	ldr	r1, [r4, #8]
 80029b4:	4620      	mov	r0, r4
 80029b6:	f000 f9c0 	bl	8002d3a <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80029ba:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80029be:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80029c0:	2306      	movs	r3, #6
 80029c2:	e7bf      	b.n	8002944 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80029c4:	7961      	ldrb	r1, [r4, #5]
 80029c6:	4620      	mov	r0, r4
 80029c8:	f000 fd34 	bl	8003434 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80029cc:	2801      	cmp	r0, #1
 80029ce:	d0d0      	beq.n	8002972 <USBH_CtlReq+0x76>
    else if  (URB_Status == USBH_URB_STALL)
 80029d0:	2805      	cmp	r0, #5
 80029d2:	d105      	bne.n	80029e0 <USBH_CtlReq+0xe4>
      phost->RequestState = CMD_SEND;
 80029d4:	2301      	movs	r3, #1
 80029d6:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 80029dc:	2003      	movs	r0, #3
 80029de:	e79b      	b.n	8002918 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80029e0:	2802      	cmp	r0, #2
 80029e2:	d0c0      	beq.n	8002966 <USBH_CtlReq+0x6a>
      if (URB_Status == USBH_URB_ERROR)
 80029e4:	2804      	cmp	r0, #4
 80029e6:	d190      	bne.n	800290a <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 80029e8:	230b      	movs	r3, #11
 80029ea:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80029ec:	2301      	movs	r3, #1
 80029ee:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 80029f0:	2002      	movs	r0, #2
 80029f2:	e791      	b.n	8002918 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 80029f4:	2200      	movs	r2, #0
 80029f6:	7923      	ldrb	r3, [r4, #4]
 80029f8:	4611      	mov	r1, r2
 80029fa:	4620      	mov	r0, r4
 80029fc:	f000 f9b4 	bl	8002d68 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8002a00:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8002a04:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8002a06:	2308      	movs	r3, #8
 8002a08:	e79c      	b.n	8002944 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8002a0a:	7921      	ldrb	r1, [r4, #4]
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f000 fd11 	bl	8003434 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8002a12:	2801      	cmp	r0, #1
 8002a14:	d104      	bne.n	8002a20 <USBH_CtlReq+0x124>
      phost->RequestState = CMD_SEND;
 8002a16:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 8002a18:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8002a1a:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8002a1c:	7620      	strb	r0, [r4, #24]
 8002a1e:	e77b      	b.n	8002918 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8002a20:	2804      	cmp	r0, #4
 8002a22:	d0ac      	beq.n	800297e <USBH_CtlReq+0x82>
      if(URB_Status == USBH_URB_STALL)
 8002a24:	2805      	cmp	r0, #5
 8002a26:	f47f af70 	bne.w	800290a <USBH_CtlReq+0xe>
 8002a2a:	e7d3      	b.n	80029d4 <USBH_CtlReq+0xd8>
    USBH_CtlSendData (phost,
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	7963      	ldrb	r3, [r4, #5]
 8002a30:	9100      	str	r1, [sp, #0]
 8002a32:	4620      	mov	r0, r4
 8002a34:	4611      	mov	r1, r2
 8002a36:	f000 f980 	bl	8002d3a <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8002a3a:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8002a3e:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8002a40:	230a      	movs	r3, #10
 8002a42:	e77f      	b.n	8002944 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8002a44:	7961      	ldrb	r1, [r4, #5]
 8002a46:	4620      	mov	r0, r4
 8002a48:	f000 fcf4 	bl	8003434 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8002a4c:	2801      	cmp	r0, #1
 8002a4e:	d0e2      	beq.n	8002a16 <USBH_CtlReq+0x11a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8002a50:	2802      	cmp	r0, #2
 8002a52:	d1a9      	bne.n	80029a8 <USBH_CtlReq+0xac>
 8002a54:	e78b      	b.n	800296e <USBH_CtlReq+0x72>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8002a56:	7e63      	ldrb	r3, [r4, #25]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	7663      	strb	r3, [r4, #25]
 8002a60:	d806      	bhi.n	8002a70 <USBH_CtlReq+0x174>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8002a62:	4620      	mov	r0, r4
 8002a64:	f000 fc7c 	bl	8003360 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8002a68:	2001      	movs	r0, #1
 8002a6a:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8002a6c:	70a0      	strb	r0, [r4, #2]
 8002a6e:	e753      	b.n	8002918 <USBH_CtlReq+0x1c>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8002a70:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8002a74:	2106      	movs	r1, #6
 8002a76:	4620      	mov	r0, r4
 8002a78:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	7663      	strb	r3, [r4, #25]
 8002a7e:	e7b5      	b.n	80029ec <USBH_CtlReq+0xf0>

08002a80 <USBH_GetDescriptor>:
{
 8002a80:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8002a82:	7884      	ldrb	r4, [r0, #2]
{
 8002a84:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8002a88:	2c01      	cmp	r4, #1
 8002a8a:	d110      	bne.n	8002aae <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8002a8c:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8002a90:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8002a92:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8002a96:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8002a9a:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8002a9c:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8002aa0:	bf0c      	ite	eq
 8002aa2:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8002aa6:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8002aa8:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8002aaa:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8002aac:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8002aae:	462a      	mov	r2, r5
 8002ab0:	4619      	mov	r1, r3
}
 8002ab2:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8002ab4:	f7ff bf22 	b.w	80028fc <USBH_CtlReq>

08002ab8 <USBH_Get_DevDesc>:
{
 8002ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8002aba:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8002abe:	460d      	mov	r5, r1
 8002ac0:	9100      	str	r1, [sp, #0]
 8002ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac6:	2100      	movs	r1, #0
{
 8002ac8:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8002aca:	f7ff ffd9 	bl	8002a80 <USBH_GetDescriptor>
 8002ace:	bbc8      	cbnz	r0, 8002b44 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8002ad0:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8002ad4:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8002ad8:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8002adc:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8002ae0:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8002ae4:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8002ae8:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8002aec:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8002af0:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8002af4:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8002af8:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8002afc:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 8002b00:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8002b02:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8002b06:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8002b0a:	d91b      	bls.n	8002b44 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8002b0c:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8002b10:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8002b14:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8002b18:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8002b1c:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8002b20:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8002b24:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8002b28:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8002b2c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8002b30:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8002b34:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8002b38:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8002b3c:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8002b40:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 8002b44:	b003      	add	sp, #12
 8002b46:	bd30      	pop	{r4, r5, pc}

08002b48 <USBH_Get_CfgDesc>:
{
 8002b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8002b4c:	f100 041c 	add.w	r4, r0, #28
{
 8002b50:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8002b52:	9100      	str	r1, [sp, #0]
 8002b54:	4623      	mov	r3, r4
 8002b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5a:	2100      	movs	r1, #0
{
 8002b5c:	4605      	mov	r5, r0
  if((status = USBH_GetDescriptor(phost,
 8002b5e:	f7ff ff8f 	bl	8002a80 <USBH_GetDescriptor>
 8002b62:	bb40      	cbnz	r0, 8002bb6 <USBH_Get_CfgDesc+0x6e>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8002b64:	7f2b      	ldrb	r3, [r5, #28]
 8002b66:	f885 3334 	strb.w	r3, [r5, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8002b6a:	7f6b      	ldrb	r3, [r5, #29]
 8002b6c:	f885 3335 	strb.w	r3, [r5, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8002b70:	f895 3020 	ldrb.w	r3, [r5, #32]
 8002b74:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8002b78:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8002b7c:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8002b80:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8002b84:	f885 333a 	strb.w	r3, [r5, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8002b88:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8002b8c:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8002b90:	f885 333b 	strb.w	r3, [r5, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8002b94:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8002b96:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8002b9a:	f8a5 c336 	strh.w	ip, [r5, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8002b9e:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8002ba2:	d908      	bls.n	8002bb6 <USBH_Get_CfgDesc+0x6e>
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	4607      	mov	r7, r0
    ptr = USB_LEN_CFG_DESC;
 8002ba8:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8002baa:	f04f 0e1a 	mov.w	lr, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8002bae:	2f02      	cmp	r7, #2
 8002bb0:	d001      	beq.n	8002bb6 <USBH_Get_CfgDesc+0x6e>
 8002bb2:	4594      	cmp	ip, r2
 8002bb4:	d802      	bhi.n	8002bbc <USBH_Get_CfgDesc+0x74>
}
 8002bb6:	b003      	add	sp, #12
 8002bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002bbc:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8002bbe:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002bc0:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8002bc2:	7861      	ldrb	r1, [r4, #1]
 8002bc4:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002bc6:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8002bc8:	d1f1      	bne.n	8002bae <USBH_Get_CfgDesc+0x66>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8002bca:	7821      	ldrb	r1, [r4, #0]
 8002bcc:	f883 133e 	strb.w	r1, [r3, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8002bd0:	7861      	ldrb	r1, [r4, #1]
 8002bd2:	f883 133f 	strb.w	r1, [r3, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8002bd6:	78a1      	ldrb	r1, [r4, #2]
 8002bd8:	f883 1340 	strb.w	r1, [r3, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8002bdc:	78e1      	ldrb	r1, [r4, #3]
 8002bde:	f883 1341 	strb.w	r1, [r3, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8002be2:	7921      	ldrb	r1, [r4, #4]
 8002be4:	f883 1342 	strb.w	r1, [r3, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8002be8:	7961      	ldrb	r1, [r4, #5]
 8002bea:	f883 1343 	strb.w	r1, [r3, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8002bee:	79a1      	ldrb	r1, [r4, #6]
 8002bf0:	f883 1344 	strb.w	r1, [r3, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8002bf4:	79e1      	ldrb	r1, [r4, #7]
 8002bf6:	f883 1345 	strb.w	r1, [r3, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8002bfa:	7a21      	ldrb	r1, [r4, #8]
 8002bfc:	f883 1346 	strb.w	r1, [r3, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8002c00:	fb0e f807 	mul.w	r8, lr, r7
        ep_ix = 0U;
 8002c04:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8002c06:	f893 6342 	ldrb.w	r6, [r3, #834]	; 0x342
 8002c0a:	428e      	cmp	r6, r1
 8002c0c:	d901      	bls.n	8002c12 <USBH_Get_CfgDesc+0xca>
 8002c0e:	4594      	cmp	ip, r2
 8002c10:	d802      	bhi.n	8002c18 <USBH_Get_CfgDesc+0xd0>
 8002c12:	3701      	adds	r7, #1
 8002c14:	331a      	adds	r3, #26
 8002c16:	e7ca      	b.n	8002bae <USBH_Get_CfgDesc+0x66>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002c18:	7826      	ldrb	r6, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8002c1a:	4434      	add	r4, r6
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002c1c:	4432      	add	r2, r6
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8002c1e:	7866      	ldrb	r6, [r4, #1]
 8002c20:	2e05      	cmp	r6, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002c22:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8002c24:	d1ef      	bne.n	8002c06 <USBH_Get_CfgDesc+0xbe>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8002c26:	1c4e      	adds	r6, r1, #1
 8002c28:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
 8002c2c:	4429      	add	r1, r5
 8002c2e:	f894 9000 	ldrb.w	r9, [r4]
 8002c32:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8002c36:	f894 9001 	ldrb.w	r9, [r4, #1]
 8002c3a:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8002c3e:	f894 9002 	ldrb.w	r9, [r4, #2]
 8002c42:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8002c46:	f894 9003 	ldrb.w	r9, [r4, #3]
 8002c4a:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8002c4e:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8002c52:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8002c56:	f894 9006 	ldrb.w	r9, [r4, #6]
 8002c5a:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8002c5e:	b2f1      	uxtb	r1, r6
 8002c60:	e7d1      	b.n	8002c06 <USBH_Get_CfgDesc+0xbe>

08002c62 <USBH_Get_StringDesc>:
{
 8002c62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8002c64:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8002c68:	4614      	mov	r4, r2
 8002c6a:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8002c72:	462b      	mov	r3, r5
 8002c74:	2100      	movs	r1, #0
{
 8002c76:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8002c78:	f7ff ff02 	bl	8002a80 <USBH_GetDescriptor>
 8002c7c:	b978      	cbnz	r0, 8002c9e <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8002c7e:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d10b      	bne.n	8002c9e <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8002c86:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8002c8a:	3b02      	subs	r3, #2
 8002c8c:	42bb      	cmp	r3, r7
 8002c8e:	bf28      	it	cs
 8002c90:	463b      	movcs	r3, r7
 8002c92:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8002c94:	4602      	mov	r2, r0
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d803      	bhi.n	8002ca2 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	7023      	strb	r3, [r4, #0]
}
 8002c9e:	b003      	add	sp, #12
 8002ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8002ca2:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8002ca4:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8002ca6:	7889      	ldrb	r1, [r1, #2]
 8002ca8:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8002cac:	b292      	uxth	r2, r2
 8002cae:	e7f2      	b.n	8002c96 <USBH_Get_StringDesc+0x34>

08002cb0 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8002cb0:	7883      	ldrb	r3, [r0, #2]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d105      	bne.n	8002cc2 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8002cb6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002cba:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8002cbc:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8002cbe:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8002cc0:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	f7ff be19 	b.w	80028fc <USBH_CtlReq>

08002cca <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8002cca:	7883      	ldrb	r3, [r0, #2]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d105      	bne.n	8002cdc <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8002cd0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002cd4:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8002cd6:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 8002cd8:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8002cda:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U , 0U);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4611      	mov	r1, r2
 8002ce0:	f7ff be0c 	b.w	80028fc <USBH_CtlReq>

08002ce4 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8002ce4:	7883      	ldrb	r3, [r0, #2]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d105      	bne.n	8002cf6 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8002cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cee:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8002cf0:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = wValue;
 8002cf2:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8002cf4:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	f7ff bdff 	b.w	80028fc <USBH_CtlReq>

08002cfe <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8002cfe:	7883      	ldrb	r3, [r0, #2]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8002d04:	f44f 7381 	mov.w	r3, #258	; 0x102
 8002d08:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8002d0a:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 8002d0c:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8002d0e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8002d10:	2200      	movs	r2, #0
 8002d12:	4611      	mov	r1, r2
 8002d14:	f7ff bdf2 	b.w	80028fc <USBH_CtlReq>

08002d18 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8002d18:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002d1a:	2308      	movs	r3, #8
{
 8002d1c:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002d1e:	2400      	movs	r4, #0
{
 8002d20:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002d22:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002d26:	e9cd 4100 	strd	r4, r1, [sp]
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	4629      	mov	r1, r5
 8002d30:	f000 fb66 	bl	8003400 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8002d34:	4620      	mov	r0, r4
 8002d36:	b005      	add	sp, #20
 8002d38:	bd30      	pop	{r4, r5, pc}

08002d3a <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8002d3a:	b530      	push	{r4, r5, lr}
 8002d3c:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8002d3e:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002d42:	9101      	str	r1, [sp, #4]
{
 8002d44:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 8002d46:	2d00      	cmp	r5, #0
{
 8002d48:	f89d 3020 	ldrb.w	r3, [sp, #32]
    do_ping = 0U;
 8002d4c:	bf18      	it	ne
 8002d4e:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002d50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d54:	2301      	movs	r3, #1
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	f000 fb4f 	bl	8003400 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8002d62:	2000      	movs	r0, #0
 8002d64:	b005      	add	sp, #20
 8002d66:	bd30      	pop	{r4, r5, pc}

08002d68 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8002d68:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002d6a:	2400      	movs	r4, #0
{
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002d70:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8002d74:	2201      	movs	r2, #1
 8002d76:	9101      	str	r1, [sp, #4]
 8002d78:	9200      	str	r2, [sp, #0]
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	f000 fb3f 	bl	8003400 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8002d82:	4620      	mov	r0, r4
 8002d84:	b005      	add	sp, #20
 8002d86:	bd30      	pop	{r4, r5, pc}

08002d88 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t length,
                                uint8_t pipe_num)
{
 8002d88:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002d8a:	2400      	movs	r4, #0
{
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002d90:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8002d94:	2201      	movs	r2, #1
 8002d96:	9101      	str	r1, [sp, #4]
 8002d98:	9200      	str	r2, [sp, #0]
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	f000 fb2f 	bl	8003400 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
}
 8002da2:	4620      	mov	r0, r4
 8002da4:	b005      	add	sp, #20
 8002da6:	bd30      	pop	{r4, r5, pc}

08002da8 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8002da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8002daa:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002dae:	9402      	str	r4, [sp, #8]
 8002db0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8002db4:	9401      	str	r4, [sp, #4]
 8002db6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8002dba:	9400      	str	r4, [sp, #0]
 8002dbc:	f000 fafa 	bl	80033b4 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd10      	pop	{r4, pc}

08002dc6 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8002dc6:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8002dc8:	f000 fb0c 	bl	80033e4 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8002dcc:	2000      	movs	r0, #0
 8002dce:	bd08      	pop	{r3, pc}

08002dd0 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8002dd0:	b530      	push	{r4, r5, lr}
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8002dd8:	f854 5b04 	ldr.w	r5, [r4], #4
 8002ddc:	042d      	lsls	r5, r5, #16
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	d407      	bmi.n	8002df2 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8002de2:	33e0      	adds	r3, #224	; 0xe0
 8002de4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002de8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 8002dec:	b292      	uxth	r2, r2
}
 8002dee:	b2d0      	uxtb	r0, r2
 8002df0:	bd30      	pop	{r4, r5, pc}
 8002df2:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8002df4:	2b0b      	cmp	r3, #11
 8002df6:	d1ef      	bne.n	8002dd8 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8002df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dfc:	e7f7      	b.n	8002dee <USBH_AllocPipe+0x1e>

08002dfe <USBH_FreePipe>:
   if(idx < 11U)
 8002dfe:	290a      	cmp	r1, #10
 8002e00:	bf9f      	itttt	ls
 8002e02:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8002e06:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8002e0a:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8002e0e:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8002e12:	2000      	movs	r0, #0
 8002e14:	4770      	bx	lr
	...

08002e18 <GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void GPIO_Init(void)
{
 8002e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	2214      	movs	r2, #20
{
 8002e1e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	eb0d 0002 	add.w	r0, sp, r2
 8002e24:	2100      	movs	r1, #0
 8002e26:	f000 fb95 	bl	8003554 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e2a:	2400      	movs	r4, #0
 8002e2c:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <GPIO_Init+0xf4>)
 8002e2e:	9401      	str	r4, [sp, #4]
 8002e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002e32:	4f37      	ldr	r7, [pc, #220]	; (8002f10 <GPIO_Init+0xf8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002e34:	4d37      	ldr	r5, [pc, #220]	; (8002f14 <GPIO_Init+0xfc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e36:	f042 0204 	orr.w	r2, r2, #4
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e3e:	f002 0204 	and.w	r2, r2, #4
 8002e42:	9201      	str	r2, [sp, #4]
 8002e44:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e46:	9402      	str	r4, [sp, #8]
 8002e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e52:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002e56:	9202      	str	r2, [sp, #8]
 8002e58:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	9403      	str	r4, [sp, #12]
 8002e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
 8002e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e66:	f002 0201 	and.w	r2, r2, #1
 8002e6a:	9203      	str	r2, [sp, #12]
 8002e6c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6e:	9404      	str	r4, [sp, #16]
 8002e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e72:	f042 0202 	orr.w	r2, r2, #2
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002e80:	4622      	mov	r2, r4
 8002e82:	4638      	mov	r0, r7
 8002e84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e88:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002e8a:	f7fd fcbf 	bl	800080c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002e8e:	4622      	mov	r2, r4
 8002e90:	4628      	mov	r0, r5
 8002e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e96:	f7fd fcb9 	bl	800080c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e9a:	2601      	movs	r6, #1
 8002e9c:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ea0:	a905      	add	r1, sp, #20
 8002ea2:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea4:	e9cd 8605 	strd	r8, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eac:	f7fd fbe0 	bl	8000670 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002eb0:	4632      	mov	r2, r6
 8002eb2:	4641      	mov	r1, r8
 8002eb4:	4638      	mov	r0, r7
 8002eb6:	f7fd fca9 	bl	800080c <HAL_GPIO_WritePin>
                           PA6 PA7 PA8 PA10 
                           PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eba:	2703      	movs	r7, #3
 8002ebc:	f24e 53f3 	movw	r3, #58867	; 0xe5f3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec0:	a905      	add	r1, sp, #20
 8002ec2:	4815      	ldr	r0, [pc, #84]	; (8002f18 <GPIO_Init+0x100>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ec6:	e9cd 3705 	strd	r3, r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eca:	f7fd fbd1 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB3 PB4 PB5 PB6 
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8002ece:	f24f 43ff 	movw	r3, #62719	; 0xf4ff
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed2:	a905      	add	r1, sp, #20
 8002ed4:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed6:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002edc:	f7fd fbc8 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee4:	a905      	add	r1, sp, #20
 8002ee6:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee8:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f7fd fbbe 	bl	8000670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	a905      	add	r1, sp, #20
 8002efa:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002efc:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f02:	f7fd fbb5 	bl	8000670 <HAL_GPIO_Init>

}
 8002f06:	b00a      	add	sp, #40	; 0x28
 8002f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40020000 	.word	0x40020000

08002f1c <GPIO_LED_set>:

/* USER CODE BEGIN 2 */
void GPIO_LED_set(void){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f22:	4801      	ldr	r0, [pc, #4]	; (8002f28 <GPIO_LED_set+0xc>)
 8002f24:	f7fd bc72 	b.w	800080c <HAL_GPIO_WritePin>
 8002f28:	40020800 	.word	0x40020800

08002f2c <GPIO_LED_clear>:
}

void GPIO_LED_clear(void){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f32:	4801      	ldr	r0, [pc, #4]	; (8002f38 <GPIO_LED_clear+0xc>)
 8002f34:	f7fd bc6a 	b.w	800080c <HAL_GPIO_WritePin>
 8002f38:	40020800 	.word	0x40020800

08002f3c <GPIO_LED_toggle>:
}

void GPIO_LED_toggle(void){
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f40:	4801      	ldr	r0, [pc, #4]	; (8002f48 <GPIO_LED_toggle+0xc>)
 8002f42:	f7fd bc68 	b.w	8000816 <HAL_GPIO_TogglePin>
 8002f46:	bf00      	nop
 8002f48:	40020800 	.word	0x40020800

08002f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		GPIO_LED_toggle();
 8002f4e:	f7ff fff5 	bl	8002f3c <GPIO_LED_toggle>
		HAL_Delay(200);
 8002f52:	20c8      	movs	r0, #200	; 0xc8
 8002f54:	f7fd fb0e 	bl	8000574 <HAL_Delay>
 8002f58:	e7f9      	b.n	8002f4e <Error_Handler+0x2>
	...

08002f5c <SystemClock_Config>:
{
 8002f5c:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f5e:	2410      	movs	r4, #16
{
 8002f60:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f62:	4622      	mov	r2, r4
 8002f64:	2100      	movs	r1, #0
 8002f66:	a80a      	add	r0, sp, #40	; 0x28
 8002f68:	f000 faf4 	bl	8003554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f6c:	2214      	movs	r2, #20
 8002f6e:	2100      	movs	r1, #0
 8002f70:	a803      	add	r0, sp, #12
 8002f72:	f000 faef 	bl	8003554 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	2100      	movs	r1, #0
 8002f78:	4b1f      	ldr	r3, [pc, #124]	; (8002ff8 <SystemClock_Config+0x9c>)
 8002f7a:	9101      	str	r1, [sp, #4]
 8002f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f86:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	9301      	str	r3, [sp, #4]
 8002f8e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f90:	9102      	str	r1, [sp, #8]
 8002f92:	6813      	ldr	r3, [r2, #0]
 8002f94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	6813      	ldr	r3, [r2, #0]
 8002fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fa4:	9302      	str	r3, [sp, #8]
 8002fa6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fa8:	2203      	movs	r2, #3
 8002faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fb2:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fb4:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fc2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002fc4:	2290      	movs	r2, #144	; 0x90
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002fc6:	2305      	movs	r3, #5
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002fc8:	240f      	movs	r4, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fca:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002fcc:	e9cd 4210 	strd	r4, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002fd0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fd2:	f7fe f847 	bl	8001064 <HAL_RCC_OscConfig>
 8002fd6:	4601      	mov	r1, r0
 8002fd8:	b108      	cbz	r0, 8002fde <SystemClock_Config+0x82>
    Error_Handler();
 8002fda:	f7ff ffb7 	bl	8002f4c <Error_Handler>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002fde:	e9cd 4003 	strd	r4, r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fe2:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fe6:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fe8:	a803      	add	r0, sp, #12
 8002fea:	f7fe fa0f 	bl	800140c <HAL_RCC_ClockConfig>
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d1f3      	bne.n	8002fda <SystemClock_Config+0x7e>
}
 8002ff2:	b014      	add	sp, #80	; 0x50
 8002ff4:	bd10      	pop	{r4, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40007000 	.word	0x40007000

08003000 <main>:
{
 8003000:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_Init();
 8003002:	f7fd fa8b 	bl	800051c <HAL_Init>
  SystemClock_Config();
 8003006:	f7ff ffa9 	bl	8002f5c <SystemClock_Config>
  GPIO_Init();
 800300a:	f7ff ff05 	bl	8002e18 <GPIO_Init>
  MX_USART2_UART_Init();
 800300e:	f000 f881 	bl	8003114 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8003012:	f000 f8eb 	bl	80031ec <MX_USB_HOST_Init>
    if(USBH_HID_GetDeviceType(&hUsbHostFS) == HID_KEYBOARD)  {
 8003016:	4d13      	ldr	r5, [pc, #76]	; (8003064 <main+0x64>)
    		char buff[] = "\n   ";
 8003018:	4e13      	ldr	r6, [pc, #76]	; (8003068 <main+0x68>)
    MX_USB_HOST_Process();
 800301a:	f000 f907 	bl	800322c <MX_USB_HOST_Process>
    if(USBH_HID_GetDeviceType(&hUsbHostFS) == HID_KEYBOARD)  {
 800301e:	4628      	mov	r0, r5
 8003020:	f7ff f89b 	bl	800215a <USBH_HID_GetDeviceType>
 8003024:	2802      	cmp	r0, #2
 8003026:	d11a      	bne.n	800305e <main+0x5e>
    	GPIO_LED_set();
 8003028:	f7ff ff78 	bl	8002f1c <GPIO_LED_set>
    	HID_KEYBD_Info_TypeDef* k_pinfo = USBH_HID_GetKeybdInfo(&hUsbHostFS	);
 800302c:	4628      	mov	r0, r5
 800302e:	f7ff f991 	bl	8002354 <USBH_HID_GetKeybdInfo>
    	if(k_pinfo != NULL){
 8003032:	4604      	mov	r4, r0
 8003034:	2800      	cmp	r0, #0
 8003036:	d0f0      	beq.n	800301a <main+0x1a>
    		char buff[] = "\n   ";
 8003038:	6830      	ldr	r0, [r6, #0]
 800303a:	7933      	ldrb	r3, [r6, #4]
 800303c:	9000      	str	r0, [sp, #0]
    		buff[1] = USBH_HID_GetASCIICode(k_pinfo);
 800303e:	4620      	mov	r0, r4
    		char buff[] = "\n   ";
 8003040:	f88d 3004 	strb.w	r3, [sp, #4]
    		buff[1] = USBH_HID_GetASCIICode(k_pinfo);
 8003044:	f7ff f9e4 	bl	8002410 <USBH_HID_GetASCIICode>
    		UART_TX((uint8_t*)buff, sizeof(buff));
 8003048:	2105      	movs	r1, #5
    		buff[1] = USBH_HID_GetASCIICode(k_pinfo);
 800304a:	f88d 0001 	strb.w	r0, [sp, #1]
    		UART_TX((uint8_t*)buff, sizeof(buff));
 800304e:	4668      	mov	r0, sp
 8003050:	f000 f8b2 	bl	80031b8 <UART_TX>
    		UART_TX((uint8_t*)k_pinfo, sizeof(HID_KEYBD_Info_TypeDef));
 8003054:	210f      	movs	r1, #15
 8003056:	4620      	mov	r0, r4
 8003058:	f000 f8ae 	bl	80031b8 <UART_TX>
 800305c:	e7dd      	b.n	800301a <main+0x1a>
		GPIO_LED_clear();
 800305e:	f7ff ff65 	bl	8002f2c <GPIO_LED_clear>
 8003062:	e7da      	b.n	800301a <main+0x1a>
 8003064:	20000128 	.word	0x20000128
 8003068:	08003a00 	.word	0x08003a00

0800306c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800306c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <HAL_MspInit+0x34>)
 8003070:	2100      	movs	r1, #0
 8003072:	9100      	str	r1, [sp, #0]
 8003074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800307a:	645a      	str	r2, [r3, #68]	; 0x44
 800307c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800307e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003082:	9200      	str	r2, [sp, #0]
 8003084:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	9101      	str	r1, [sp, #4]
 8003088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800309a:	b002      	add	sp, #8
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800

080030a4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030a4:	4770      	bx	lr

080030a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a6:	e7fe      	b.n	80030a6 <HardFault_Handler>

080030a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a8:	e7fe      	b.n	80030a8 <MemManage_Handler>

080030aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030aa:	e7fe      	b.n	80030aa <BusFault_Handler>

080030ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030ac:	e7fe      	b.n	80030ac <UsageFault_Handler>

080030ae <SVC_Handler>:
 80030ae:	4770      	bx	lr

080030b0 <DebugMon_Handler>:
 80030b0:	4770      	bx	lr

080030b2 <PendSV_Handler>:
 80030b2:	4770      	bx	lr

080030b4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030b4:	f7fd ba4c 	b.w	8000550 <HAL_IncTick>

080030b8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80030b8:	4801      	ldr	r0, [pc, #4]	; (80030c0 <OTG_FS_IRQHandler+0x8>)
 80030ba:	f7fd bca7 	b.w	8000a0c <HAL_HCD_IRQHandler>
 80030be:	bf00      	nop
 80030c0:	200004f4 	.word	0x200004f4

080030c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80030c4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <_sbrk+0x2c>)
 80030c8:	6819      	ldr	r1, [r3, #0]
{
 80030ca:	4602      	mov	r2, r0
	if (heap_end == 0)
 80030cc:	b909      	cbnz	r1, 80030d2 <_sbrk+0xe>
		heap_end = &end;
 80030ce:	4909      	ldr	r1, [pc, #36]	; (80030f4 <_sbrk+0x30>)
 80030d0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80030d2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80030d4:	4669      	mov	r1, sp
 80030d6:	4402      	add	r2, r0
 80030d8:	428a      	cmp	r2, r1
 80030da:	d906      	bls.n	80030ea <_sbrk+0x26>
	{
		errno = ENOMEM;
 80030dc:	f000 fa00 	bl	80034e0 <__errno>
 80030e0:	230c      	movs	r3, #12
 80030e2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80030e8:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80030ea:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80030ec:	e7fc      	b.n	80030e8 <_sbrk+0x24>
 80030ee:	bf00      	nop
 80030f0:	200000b0 	.word	0x200000b0
 80030f4:	200007c0 	.word	0x200007c0

080030f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <SystemInit+0x18>)
 80030fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003106:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800310a:	609a      	str	r2, [r3, #8]
#endif
}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8003114:	480b      	ldr	r0, [pc, #44]	; (8003144 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8003116:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <MX_USART2_UART_Init+0x34>)
{
 8003118:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 800311a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800311e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003122:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003124:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003126:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800312a:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003130:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003132:	f7fe fabd 	bl	80016b0 <HAL_UART_Init>
 8003136:	b118      	cbz	r0, 8003140 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800313c:	f7ff bf06 	b.w	8002f4c <Error_Handler>
}
 8003140:	bd08      	pop	{r3, pc}
 8003142:	bf00      	nop
 8003144:	200000e8 	.word	0x200000e8
 8003148:	40004400 	.word	0x40004400

0800314c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800314c:	b510      	push	{r4, lr}
 800314e:	4604      	mov	r4, r0
 8003150:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003152:	2214      	movs	r2, #20
 8003154:	2100      	movs	r1, #0
 8003156:	a803      	add	r0, sp, #12
 8003158:	f000 f9fc 	bl	8003554 <memset>
  if(uartHandle->Instance==USART2)
 800315c:	6822      	ldr	r2, [r4, #0]
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_UART_MspInit+0x64>)
 8003160:	429a      	cmp	r2, r3
 8003162:	d122      	bne.n	80031aa <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003164:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003168:	2100      	movs	r1, #0
 800316a:	9101      	str	r1, [sp, #4]
 800316c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	4811      	ldr	r0, [pc, #68]	; (80031b4 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003170:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
 8003176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003178:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800317c:	9201      	str	r2, [sp, #4]
 800317e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003180:	9102      	str	r1, [sp, #8]
 8003182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	220c      	movs	r2, #12
 8003196:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003198:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800319e:	2307      	movs	r3, #7
 80031a0:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a4:	a903      	add	r1, sp, #12
 80031a6:	f7fd fa63 	bl	8000670 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80031aa:	b008      	add	sp, #32
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	bf00      	nop
 80031b0:	40004400 	.word	0x40004400
 80031b4:	40020000 	.word	0x40020000

080031b8 <UART_TX>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
} 

void UART_TX(uint8_t* data, int len){
	HAL_UART_Transmit(&huart2, data, len, 100);
 80031b8:	b28a      	uxth	r2, r1
 80031ba:	2364      	movs	r3, #100	; 0x64
 80031bc:	4601      	mov	r1, r0
 80031be:	4801      	ldr	r0, [pc, #4]	; (80031c4 <UART_TX+0xc>)
 80031c0:	f7fe baa4 	b.w	800170c <HAL_UART_Transmit>
 80031c4:	200000e8 	.word	0x200000e8

080031c8 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80031c8:	2904      	cmp	r1, #4
 80031ca:	d00a      	beq.n	80031e2 <USBH_UserProcess+0x1a>
 80031cc:	2905      	cmp	r1, #5
 80031ce:	d004      	beq.n	80031da <USBH_UserProcess+0x12>
 80031d0:	2902      	cmp	r1, #2
 80031d2:	d105      	bne.n	80031e0 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <USBH_UserProcess+0x20>)
 80031d6:	7019      	strb	r1, [r3, #0]
  break;
 80031d8:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 80031da:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <USBH_UserProcess+0x20>)
 80031dc:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80031de:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 80031e0:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 80031e2:	4b01      	ldr	r3, [pc, #4]	; (80031e8 <USBH_UserProcess+0x20>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	e7fa      	b.n	80031de <USBH_UserProcess+0x16>
 80031e8:	200000b4 	.word	0x200000b4

080031ec <MX_USB_HOST_Init>:
{
 80031ec:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80031ee:	2201      	movs	r2, #1
 80031f0:	490b      	ldr	r1, [pc, #44]	; (8003220 <MX_USB_HOST_Init+0x34>)
 80031f2:	480c      	ldr	r0, [pc, #48]	; (8003224 <MX_USB_HOST_Init+0x38>)
 80031f4:	f7ff f9a0 	bl	8002538 <USBH_Init>
 80031f8:	b108      	cbz	r0, 80031fe <MX_USB_HOST_Init+0x12>
    Error_Handler();
 80031fa:	f7ff fea7 	bl	8002f4c <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 80031fe:	490a      	ldr	r1, [pc, #40]	; (8003228 <MX_USB_HOST_Init+0x3c>)
 8003200:	4808      	ldr	r0, [pc, #32]	; (8003224 <MX_USB_HOST_Init+0x38>)
 8003202:	f7ff f9b0 	bl	8002566 <USBH_RegisterClass>
 8003206:	b108      	cbz	r0, 800320c <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8003208:	f7ff fea0 	bl	8002f4c <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800320c:	4805      	ldr	r0, [pc, #20]	; (8003224 <MX_USB_HOST_Init+0x38>)
 800320e:	f7ff f9dc 	bl	80025ca <USBH_Start>
 8003212:	b118      	cbz	r0, 800321c <MX_USB_HOST_Init+0x30>
}
 8003214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003218:	f7ff be98 	b.w	8002f4c <Error_Handler>
}
 800321c:	bd08      	pop	{r3, pc}
 800321e:	bf00      	nop
 8003220:	080031c9 	.word	0x080031c9
 8003224:	20000128 	.word	0x20000128
 8003228:	20000008 	.word	0x20000008

0800322c <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 800322c:	4801      	ldr	r0, [pc, #4]	; (8003234 <MX_USB_HOST_Process+0x8>)
 800322e:	f7ff b9d6 	b.w	80025de <USBH_Process>
 8003232:	bf00      	nop
 8003234:	20000128 	.word	0x20000128

08003238 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8003238:	b530      	push	{r4, r5, lr}
 800323a:	4604      	mov	r4, r0
 800323c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323e:	2214      	movs	r2, #20
 8003240:	2100      	movs	r1, #0
 8003242:	a803      	add	r0, sp, #12
 8003244:	f000 f986 	bl	8003554 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800324e:	d136      	bne.n	80032be <HAL_HCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003250:	4c1c      	ldr	r4, [pc, #112]	; (80032c4 <HAL_HCD_MspInit+0x8c>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003252:	481d      	ldr	r0, [pc, #116]	; (80032c8 <HAL_HCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003254:	2500      	movs	r5, #0
 8003256:	9501      	str	r5, [sp, #4]
 8003258:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6323      	str	r3, [r4, #48]	; 0x30
 8003260:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800326c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003270:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	f7fd f9fd 	bl	8000670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800327a:	2302      	movs	r3, #2
 800327c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003280:	2103      	movs	r1, #3
 8003282:	230a      	movs	r3, #10
 8003284:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	480f      	ldr	r0, [pc, #60]	; (80032c8 <HAL_HCD_MspInit+0x90>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328c:	a903      	add	r1, sp, #12
 800328e:	f7fd f9ef 	bl	8000670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003292:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003298:	6363      	str	r3, [r4, #52]	; 0x34
 800329a:	9502      	str	r5, [sp, #8]
 800329c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800329e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a2:	6463      	str	r3, [r4, #68]	; 0x44
 80032a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032aa:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80032ac:	2043      	movs	r0, #67	; 0x43
 80032ae:	462a      	mov	r2, r5
 80032b0:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80032b2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80032b4:	f7fd f984 	bl	80005c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80032b8:	2043      	movs	r0, #67	; 0x43
 80032ba:	f7fd f9b5 	bl	8000628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80032be:	b009      	add	sp, #36	; 0x24
 80032c0:	bd30      	pop	{r4, r5, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020000 	.word	0x40020000

080032cc <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 80032cc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80032d0:	f7ff bace 	b.w	8002870 <USBH_LL_IncTimer>

080032d4 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 80032d4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80032d8:	f7ff bae0 	b.w	800289c <USBH_LL_Connect>

080032dc <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80032dc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80032e0:	f7ff baf0 	b.w	80028c4 <USBH_LL_Disconnect>

080032e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80032e4:	4770      	bx	lr

080032e6 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 80032e6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80032ea:	f7ff bacf 	b.w	800288c <USBH_LL_PortEnabled>

080032ee <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 80032ee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80032f2:	f7ff bacf 	b.w	8002894 <USBH_LL_PortDisabled>
	...

080032f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80032f8:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80032fa:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 80032fe:	2b01      	cmp	r3, #1
{
 8003300:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8003302:	d11b      	bne.n	800333c <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8003304:	480e      	ldr	r0, [pc, #56]	; (8003340 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 8003306:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800330a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800330e:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8003310:	2208      	movs	r2, #8
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8003312:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003316:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8003318:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.pData = phost;
 800331a:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800331e:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003320:	e9c0 2306 	strd	r2, r3, [r0, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8003324:	f7fd fac7 	bl	80008b6 <HAL_HCD_Init>
 8003328:	b108      	cbz	r0, 800332e <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 800332a:	f7ff fe0f 	bl	8002f4c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800332e:	4804      	ldr	r0, [pc, #16]	; (8003340 <USBH_LL_Init+0x48>)
 8003330:	f7fd fe91 	bl	8001056 <HAL_HCD_GetCurrentFrame>
 8003334:	4601      	mov	r1, r0
 8003336:	4620      	mov	r0, r4
 8003338:	f7ff fa97 	bl	800286a <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800333c:	2000      	movs	r0, #0
 800333e:	bd10      	pop	{r4, pc}
 8003340:	200004f4 	.word	0x200004f4

08003344 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8003344:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8003346:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800334a:	f7fd fe53 	bl	8000ff4 <HAL_HCD_Start>
 800334e:	2803      	cmp	r0, #3
 8003350:	bf96      	itet	ls
 8003352:	4b02      	ldrls	r3, [pc, #8]	; (800335c <USBH_LL_Start+0x18>)
 8003354:	2002      	movhi	r0, #2
 8003356:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003358:	bd08      	pop	{r3, pc}
 800335a:	bf00      	nop
 800335c:	08003a20 	.word	0x08003a20

08003360 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003360:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8003362:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003366:	f7fd fe5b 	bl	8001020 <HAL_HCD_Stop>
 800336a:	2803      	cmp	r0, #3
 800336c:	bf96      	itet	ls
 800336e:	4b02      	ldrls	r3, [pc, #8]	; (8003378 <USBH_LL_Stop+0x18>)
 8003370:	2002      	movhi	r0, #2
 8003372:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8003374:	bd08      	pop	{r3, pc}
 8003376:	bf00      	nop
 8003378:	08003a20 	.word	0x08003a20

0800337c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800337c:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800337e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003382:	f7fd fe6b 	bl	800105c <HAL_HCD_GetCurrentSpeed>
 8003386:	2802      	cmp	r0, #2
 8003388:	bf96      	itet	ls
 800338a:	4b02      	ldrls	r3, [pc, #8]	; (8003394 <USBH_LL_GetSpeed+0x18>)
 800338c:	2001      	movhi	r0, #1
 800338e:	5c18      	ldrbls	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8003390:	bd08      	pop	{r3, pc}
 8003392:	bf00      	nop
 8003394:	08003a1d 	.word	0x08003a1d

08003398 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8003398:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800339a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800339e:	f7fd fe51 	bl	8001044 <HAL_HCD_ResetPort>
 80033a2:	2803      	cmp	r0, #3
 80033a4:	bf96      	itet	ls
 80033a6:	4b02      	ldrls	r3, [pc, #8]	; (80033b0 <USBH_LL_ResetPort+0x18>)
 80033a8:	2002      	movhi	r0, #2
 80033aa:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80033ac:	bd08      	pop	{r3, pc}
 80033ae:	bf00      	nop
 80033b0:	08003a20 	.word	0x08003a20

080033b4 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80033b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80033b6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80033ba:	9402      	str	r4, [sp, #8]
 80033bc:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80033c0:	9401      	str	r4, [sp, #4]
 80033c2:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80033c6:	9400      	str	r4, [sp, #0]
 80033c8:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80033cc:	f7fd fa2a 	bl	8000824 <HAL_HCD_HC_Init>
 80033d0:	2803      	cmp	r0, #3
 80033d2:	bf9a      	itte	ls
 80033d4:	4b02      	ldrls	r3, [pc, #8]	; (80033e0 <USBH_LL_OpenPipe+0x2c>)
 80033d6:	5c18      	ldrbls	r0, [r3, r0]
 80033d8:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80033da:	b004      	add	sp, #16
 80033dc:	bd10      	pop	{r4, pc}
 80033de:	bf00      	nop
 80033e0:	08003a20 	.word	0x08003a20

080033e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80033e4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80033e6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80033ea:	f7fd fa52 	bl	8000892 <HAL_HCD_HC_Halt>
 80033ee:	2803      	cmp	r0, #3
 80033f0:	bf96      	itet	ls
 80033f2:	4b02      	ldrls	r3, [pc, #8]	; (80033fc <USBH_LL_ClosePipe+0x18>)
 80033f4:	2002      	movhi	r0, #2
 80033f6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80033f8:	bd08      	pop	{r3, pc}
 80033fa:	bf00      	nop
 80033fc:	08003a20 	.word	0x08003a20

08003400 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8003400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8003402:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8003406:	9403      	str	r4, [sp, #12]
 8003408:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800340c:	9402      	str	r4, [sp, #8]
 800340e:	9c07      	ldr	r4, [sp, #28]
 8003410:	9401      	str	r4, [sp, #4]
 8003412:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003416:	9400      	str	r4, [sp, #0]
 8003418:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800341c:	f7fd fa96 	bl	800094c <HAL_HCD_HC_SubmitRequest>
 8003420:	2803      	cmp	r0, #3
 8003422:	bf9a      	itte	ls
 8003424:	4b02      	ldrls	r3, [pc, #8]	; (8003430 <USBH_LL_SubmitURB+0x30>)
 8003426:	5c18      	ldrbls	r0, [r3, r0]
 8003428:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800342a:	b004      	add	sp, #16
 800342c:	bd10      	pop	{r4, pc}
 800342e:	bf00      	nop
 8003430:	08003a20 	.word	0x08003a20

08003434 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8003434:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003438:	f7fd be07 	b.w	800104a <HAL_HCD_HC_GetURBState>

0800343c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800343c:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800343e:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8003442:	2b01      	cmp	r3, #1
 8003444:	d102      	bne.n	800344c <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8003446:	4608      	mov	r0, r1
 8003448:	f000 f816 	bl	8003478 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800344c:	20c8      	movs	r0, #200	; 0xc8
 800344e:	f7fd f891 	bl	8000574 <HAL_Delay>
  return USBH_OK;
}
 8003452:	2000      	movs	r0, #0
 8003454:	bd08      	pop	{r3, pc}

08003456 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8003456:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800345a:	2328      	movs	r3, #40	; 0x28
 800345c:	fb03 0101 	mla	r1, r3, r1, r0
 8003460:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8003464:	b11b      	cbz	r3, 800346e <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8003466:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800346a:	2000      	movs	r0, #0
 800346c:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800346e:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8003472:	e7fa      	b.n	800346a <USBH_LL_SetToggle+0x14>

08003474 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8003474:	f7fd b87e 	b.w	8000574 <HAL_Delay>

08003478 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,(GPIO_PinState)data);
 8003478:	fab0 f280 	clz	r2, r0
 800347c:	0952      	lsrs	r2, r2, #5
 800347e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003482:	4801      	ldr	r0, [pc, #4]	; (8003488 <MX_DriverVbusFS+0x10>)
 8003484:	f7fd b9c2 	b.w	800080c <HAL_GPIO_WritePin>
 8003488:	40020400 	.word	0x40020400

0800348c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800348c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003490:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003492:	e003      	b.n	800349c <LoopCopyDataInit>

08003494 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003496:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003498:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800349a:	3104      	adds	r1, #4

0800349c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800349c:	480b      	ldr	r0, [pc, #44]	; (80034cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034a4:	d3f6      	bcc.n	8003494 <CopyDataInit>
  ldr  r2, =_sbss
 80034a6:	4a0b      	ldr	r2, [pc, #44]	; (80034d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034a8:	e002      	b.n	80034b0 <LoopFillZerobss>

080034aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034ac:	f842 3b04 	str.w	r3, [r2], #4

080034b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034b0:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034b4:	d3f9      	bcc.n	80034aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034b6:	f7ff fe1f 	bl	80030f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ba:	f000 f817 	bl	80034ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034be:	f7ff fd9f 	bl	8003000 <main>
  bx  lr    
 80034c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034c4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80034c8:	08003a34 	.word	0x08003a34
  ldr  r0, =_sdata
 80034cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034d0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80034d4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80034d8:	200007bc 	.word	0x200007bc

080034dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034dc:	e7fe      	b.n	80034dc <ADC_IRQHandler>
	...

080034e0 <__errno>:
 80034e0:	4b01      	ldr	r3, [pc, #4]	; (80034e8 <__errno+0x8>)
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	2000002c 	.word	0x2000002c

080034ec <__libc_init_array>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	4e0d      	ldr	r6, [pc, #52]	; (8003524 <__libc_init_array+0x38>)
 80034f0:	4c0d      	ldr	r4, [pc, #52]	; (8003528 <__libc_init_array+0x3c>)
 80034f2:	1ba4      	subs	r4, r4, r6
 80034f4:	10a4      	asrs	r4, r4, #2
 80034f6:	2500      	movs	r5, #0
 80034f8:	42a5      	cmp	r5, r4
 80034fa:	d109      	bne.n	8003510 <__libc_init_array+0x24>
 80034fc:	4e0b      	ldr	r6, [pc, #44]	; (800352c <__libc_init_array+0x40>)
 80034fe:	4c0c      	ldr	r4, [pc, #48]	; (8003530 <__libc_init_array+0x44>)
 8003500:	f000 f8ea 	bl	80036d8 <_init>
 8003504:	1ba4      	subs	r4, r4, r6
 8003506:	10a4      	asrs	r4, r4, #2
 8003508:	2500      	movs	r5, #0
 800350a:	42a5      	cmp	r5, r4
 800350c:	d105      	bne.n	800351a <__libc_init_array+0x2e>
 800350e:	bd70      	pop	{r4, r5, r6, pc}
 8003510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003514:	4798      	blx	r3
 8003516:	3501      	adds	r5, #1
 8003518:	e7ee      	b.n	80034f8 <__libc_init_array+0xc>
 800351a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800351e:	4798      	blx	r3
 8003520:	3501      	adds	r5, #1
 8003522:	e7f2      	b.n	800350a <__libc_init_array+0x1e>
 8003524:	08003a2c 	.word	0x08003a2c
 8003528:	08003a2c 	.word	0x08003a2c
 800352c:	08003a2c 	.word	0x08003a2c
 8003530:	08003a30 	.word	0x08003a30

08003534 <malloc>:
 8003534:	4b02      	ldr	r3, [pc, #8]	; (8003540 <malloc+0xc>)
 8003536:	4601      	mov	r1, r0
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	f000 b861 	b.w	8003600 <_malloc_r>
 800353e:	bf00      	nop
 8003540:	2000002c 	.word	0x2000002c

08003544 <free>:
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <free+0xc>)
 8003546:	4601      	mov	r1, r0
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	f000 b80b 	b.w	8003564 <_free_r>
 800354e:	bf00      	nop
 8003550:	2000002c 	.word	0x2000002c

08003554 <memset>:
 8003554:	4402      	add	r2, r0
 8003556:	4603      	mov	r3, r0
 8003558:	4293      	cmp	r3, r2
 800355a:	d100      	bne.n	800355e <memset+0xa>
 800355c:	4770      	bx	lr
 800355e:	f803 1b01 	strb.w	r1, [r3], #1
 8003562:	e7f9      	b.n	8003558 <memset+0x4>

08003564 <_free_r>:
 8003564:	b538      	push	{r3, r4, r5, lr}
 8003566:	4605      	mov	r5, r0
 8003568:	2900      	cmp	r1, #0
 800356a:	d045      	beq.n	80035f8 <_free_r+0x94>
 800356c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003570:	1f0c      	subs	r4, r1, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	bfb8      	it	lt
 8003576:	18e4      	addlt	r4, r4, r3
 8003578:	f000 f8ac 	bl	80036d4 <__malloc_lock>
 800357c:	4a1f      	ldr	r2, [pc, #124]	; (80035fc <_free_r+0x98>)
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	4610      	mov	r0, r2
 8003582:	b933      	cbnz	r3, 8003592 <_free_r+0x2e>
 8003584:	6063      	str	r3, [r4, #4]
 8003586:	6014      	str	r4, [r2, #0]
 8003588:	4628      	mov	r0, r5
 800358a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800358e:	f000 b8a2 	b.w	80036d6 <__malloc_unlock>
 8003592:	42a3      	cmp	r3, r4
 8003594:	d90c      	bls.n	80035b0 <_free_r+0x4c>
 8003596:	6821      	ldr	r1, [r4, #0]
 8003598:	1862      	adds	r2, r4, r1
 800359a:	4293      	cmp	r3, r2
 800359c:	bf04      	itt	eq
 800359e:	681a      	ldreq	r2, [r3, #0]
 80035a0:	685b      	ldreq	r3, [r3, #4]
 80035a2:	6063      	str	r3, [r4, #4]
 80035a4:	bf04      	itt	eq
 80035a6:	1852      	addeq	r2, r2, r1
 80035a8:	6022      	streq	r2, [r4, #0]
 80035aa:	6004      	str	r4, [r0, #0]
 80035ac:	e7ec      	b.n	8003588 <_free_r+0x24>
 80035ae:	4613      	mov	r3, r2
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	b10a      	cbz	r2, 80035b8 <_free_r+0x54>
 80035b4:	42a2      	cmp	r2, r4
 80035b6:	d9fa      	bls.n	80035ae <_free_r+0x4a>
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	1858      	adds	r0, r3, r1
 80035bc:	42a0      	cmp	r0, r4
 80035be:	d10b      	bne.n	80035d8 <_free_r+0x74>
 80035c0:	6820      	ldr	r0, [r4, #0]
 80035c2:	4401      	add	r1, r0
 80035c4:	1858      	adds	r0, r3, r1
 80035c6:	4282      	cmp	r2, r0
 80035c8:	6019      	str	r1, [r3, #0]
 80035ca:	d1dd      	bne.n	8003588 <_free_r+0x24>
 80035cc:	6810      	ldr	r0, [r2, #0]
 80035ce:	6852      	ldr	r2, [r2, #4]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	4401      	add	r1, r0
 80035d4:	6019      	str	r1, [r3, #0]
 80035d6:	e7d7      	b.n	8003588 <_free_r+0x24>
 80035d8:	d902      	bls.n	80035e0 <_free_r+0x7c>
 80035da:	230c      	movs	r3, #12
 80035dc:	602b      	str	r3, [r5, #0]
 80035de:	e7d3      	b.n	8003588 <_free_r+0x24>
 80035e0:	6820      	ldr	r0, [r4, #0]
 80035e2:	1821      	adds	r1, r4, r0
 80035e4:	428a      	cmp	r2, r1
 80035e6:	bf04      	itt	eq
 80035e8:	6811      	ldreq	r1, [r2, #0]
 80035ea:	6852      	ldreq	r2, [r2, #4]
 80035ec:	6062      	str	r2, [r4, #4]
 80035ee:	bf04      	itt	eq
 80035f0:	1809      	addeq	r1, r1, r0
 80035f2:	6021      	streq	r1, [r4, #0]
 80035f4:	605c      	str	r4, [r3, #4]
 80035f6:	e7c7      	b.n	8003588 <_free_r+0x24>
 80035f8:	bd38      	pop	{r3, r4, r5, pc}
 80035fa:	bf00      	nop
 80035fc:	200000b8 	.word	0x200000b8

08003600 <_malloc_r>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	1ccd      	adds	r5, r1, #3
 8003604:	f025 0503 	bic.w	r5, r5, #3
 8003608:	3508      	adds	r5, #8
 800360a:	2d0c      	cmp	r5, #12
 800360c:	bf38      	it	cc
 800360e:	250c      	movcc	r5, #12
 8003610:	2d00      	cmp	r5, #0
 8003612:	4606      	mov	r6, r0
 8003614:	db01      	blt.n	800361a <_malloc_r+0x1a>
 8003616:	42a9      	cmp	r1, r5
 8003618:	d903      	bls.n	8003622 <_malloc_r+0x22>
 800361a:	230c      	movs	r3, #12
 800361c:	6033      	str	r3, [r6, #0]
 800361e:	2000      	movs	r0, #0
 8003620:	bd70      	pop	{r4, r5, r6, pc}
 8003622:	f000 f857 	bl	80036d4 <__malloc_lock>
 8003626:	4a21      	ldr	r2, [pc, #132]	; (80036ac <_malloc_r+0xac>)
 8003628:	6814      	ldr	r4, [r2, #0]
 800362a:	4621      	mov	r1, r4
 800362c:	b991      	cbnz	r1, 8003654 <_malloc_r+0x54>
 800362e:	4c20      	ldr	r4, [pc, #128]	; (80036b0 <_malloc_r+0xb0>)
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	b91b      	cbnz	r3, 800363c <_malloc_r+0x3c>
 8003634:	4630      	mov	r0, r6
 8003636:	f000 f83d 	bl	80036b4 <_sbrk_r>
 800363a:	6020      	str	r0, [r4, #0]
 800363c:	4629      	mov	r1, r5
 800363e:	4630      	mov	r0, r6
 8003640:	f000 f838 	bl	80036b4 <_sbrk_r>
 8003644:	1c43      	adds	r3, r0, #1
 8003646:	d124      	bne.n	8003692 <_malloc_r+0x92>
 8003648:	230c      	movs	r3, #12
 800364a:	6033      	str	r3, [r6, #0]
 800364c:	4630      	mov	r0, r6
 800364e:	f000 f842 	bl	80036d6 <__malloc_unlock>
 8003652:	e7e4      	b.n	800361e <_malloc_r+0x1e>
 8003654:	680b      	ldr	r3, [r1, #0]
 8003656:	1b5b      	subs	r3, r3, r5
 8003658:	d418      	bmi.n	800368c <_malloc_r+0x8c>
 800365a:	2b0b      	cmp	r3, #11
 800365c:	d90f      	bls.n	800367e <_malloc_r+0x7e>
 800365e:	600b      	str	r3, [r1, #0]
 8003660:	50cd      	str	r5, [r1, r3]
 8003662:	18cc      	adds	r4, r1, r3
 8003664:	4630      	mov	r0, r6
 8003666:	f000 f836 	bl	80036d6 <__malloc_unlock>
 800366a:	f104 000b 	add.w	r0, r4, #11
 800366e:	1d23      	adds	r3, r4, #4
 8003670:	f020 0007 	bic.w	r0, r0, #7
 8003674:	1ac3      	subs	r3, r0, r3
 8003676:	d0d3      	beq.n	8003620 <_malloc_r+0x20>
 8003678:	425a      	negs	r2, r3
 800367a:	50e2      	str	r2, [r4, r3]
 800367c:	e7d0      	b.n	8003620 <_malloc_r+0x20>
 800367e:	428c      	cmp	r4, r1
 8003680:	684b      	ldr	r3, [r1, #4]
 8003682:	bf16      	itet	ne
 8003684:	6063      	strne	r3, [r4, #4]
 8003686:	6013      	streq	r3, [r2, #0]
 8003688:	460c      	movne	r4, r1
 800368a:	e7eb      	b.n	8003664 <_malloc_r+0x64>
 800368c:	460c      	mov	r4, r1
 800368e:	6849      	ldr	r1, [r1, #4]
 8003690:	e7cc      	b.n	800362c <_malloc_r+0x2c>
 8003692:	1cc4      	adds	r4, r0, #3
 8003694:	f024 0403 	bic.w	r4, r4, #3
 8003698:	42a0      	cmp	r0, r4
 800369a:	d005      	beq.n	80036a8 <_malloc_r+0xa8>
 800369c:	1a21      	subs	r1, r4, r0
 800369e:	4630      	mov	r0, r6
 80036a0:	f000 f808 	bl	80036b4 <_sbrk_r>
 80036a4:	3001      	adds	r0, #1
 80036a6:	d0cf      	beq.n	8003648 <_malloc_r+0x48>
 80036a8:	6025      	str	r5, [r4, #0]
 80036aa:	e7db      	b.n	8003664 <_malloc_r+0x64>
 80036ac:	200000b8 	.word	0x200000b8
 80036b0:	200000bc 	.word	0x200000bc

080036b4 <_sbrk_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4c06      	ldr	r4, [pc, #24]	; (80036d0 <_sbrk_r+0x1c>)
 80036b8:	2300      	movs	r3, #0
 80036ba:	4605      	mov	r5, r0
 80036bc:	4608      	mov	r0, r1
 80036be:	6023      	str	r3, [r4, #0]
 80036c0:	f7ff fd00 	bl	80030c4 <_sbrk>
 80036c4:	1c43      	adds	r3, r0, #1
 80036c6:	d102      	bne.n	80036ce <_sbrk_r+0x1a>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	b103      	cbz	r3, 80036ce <_sbrk_r+0x1a>
 80036cc:	602b      	str	r3, [r5, #0]
 80036ce:	bd38      	pop	{r3, r4, r5, pc}
 80036d0:	200007b8 	.word	0x200007b8

080036d4 <__malloc_lock>:
 80036d4:	4770      	bx	lr

080036d6 <__malloc_unlock>:
 80036d6:	4770      	bx	lr

080036d8 <_init>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	bf00      	nop
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr

080036e4 <_fini>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	bf00      	nop
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr
